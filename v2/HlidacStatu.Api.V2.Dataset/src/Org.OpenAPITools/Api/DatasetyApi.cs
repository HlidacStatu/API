/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídače státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Vytvoří nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSCreatedDTO</returns>
        DSCreatedDTO ApiV2DatasetyCreate(Registration data, int operationIndex = 0);

        /// <summary>
        /// Vytvoří nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSCreatedDTO</returns>
        ApiResponse<DSCreatedDTO> ApiV2DatasetyCreateWithHttpInfo(Registration data, int operationIndex = 0);
        /// <summary>
        /// Hromadné vkládání záznamů
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DSItemResponseDTO&gt;</returns>
        List<DSItemResponseDTO> ApiV2DatasetyDatasetItemBulkInsert(string datasetId, Object data, int operationIndex = 0);

        /// <summary>
        /// Hromadné vkládání záznamů
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DSItemResponseDTO&gt;</returns>
        ApiResponse<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo(string datasetId, Object data, int operationIndex = 0);
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool ApiV2DatasetyDatasetItemExists(string datasetId, string itemId, int operationIndex = 0);

        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2DatasetyDatasetItemExistsWithHttpInfo(string datasetId, string itemId, int operationIndex = 0);
        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiV2DatasetyDatasetItemGet(string datasetId, string itemId, int operationIndex = 0);

        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiV2DatasetyDatasetItemGetWithHttpInfo(string datasetId, string itemId, int operationIndex = 0);
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSItemResponseDTO</returns>
        DSItemResponseDTO ApiV2DatasetyDatasetItemUpdate(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSItemResponseDTO</returns>
        ApiResponse<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateWithHttpInfo(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTOObject</returns>
        SearchResultDTOObject ApiV2DatasetyDatasetSearch(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0);

        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTOObject</returns>
        ApiResponse<SearchResultDTOObject> ApiV2DatasetyDatasetSearchWithHttpInfo(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0);
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool ApiV2DatasetyDelete(string datasetId, int operationIndex = 0);

        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2DatasetyDeleteWithHttpInfo(string datasetId, int operationIndex = 0);
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        Registration ApiV2DatasetyDetail(string datasetId, int operationIndex = 0);

        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        ApiResponse<Registration> ApiV2DatasetyDetailWithHttpInfo(string datasetId, int operationIndex = 0);
        /// <summary>
        /// Načte seznam datasetů
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTORegistration</returns>
        SearchResultDTORegistration ApiV2DatasetyGetAll(int operationIndex = 0);

        /// <summary>
        /// Načte seznam datasetů
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTORegistration</returns>
        ApiResponse<SearchResultDTORegistration> ApiV2DatasetyGetAllWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        Registration ApiV2DatasetyUpdate(Registration data, int operationIndex = 0);

        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        ApiResponse<Registration> ApiV2DatasetyUpdateWithHttpInfo(Registration data, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Vytvoří nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSCreatedDTO</returns>
        System.Threading.Tasks.Task<DSCreatedDTO> ApiV2DatasetyCreateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Vytvoří nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSCreatedDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSCreatedDTO>> ApiV2DatasetyCreateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Hromadné vkládání záznamů
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DSItemResponseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Hromadné vkládání záznamů
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DSItemResponseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DSItemResponseDTO>>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfoAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2DatasetyDatasetItemExistsAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDatasetItemExistsWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiV2DatasetyDatasetItemGetAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2DatasetyDatasetItemGetWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSItemResponseDTO</returns>
        System.Threading.Tasks.Task<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateAsync(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSItemResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSItemResponseDTO>> ApiV2DatasetyDatasetItemUpdateWithHttpInfoAsync(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTOObject</returns>
        System.Threading.Tasks.Task<SearchResultDTOObject> ApiV2DatasetyDatasetSearchAsync(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTOObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultDTOObject>> ApiV2DatasetyDatasetSearchWithHttpInfoAsync(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2DatasetyDeleteAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDeleteWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        System.Threading.Tasks.Task<Registration> ApiV2DatasetyDetailAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyDetailWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Načte seznam datasetů
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTORegistration</returns>
        System.Threading.Tasks.Task<SearchResultDTORegistration> ApiV2DatasetyGetAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Načte seznam datasetů
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTORegistration)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultDTORegistration>> ApiV2DatasetyGetAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        System.Threading.Tasks.Task<Registration> ApiV2DatasetyUpdateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyUpdateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetyApi : IDatasetyApiSync, IDatasetyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasetyApi : IDatasetyApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetyApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasetyApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatasetyApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Vytvoří nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSCreatedDTO</returns>
        public DSCreatedDTO ApiV2DatasetyCreate(Registration data, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DSCreatedDTO> localVarResponse = ApiV2DatasetyCreateWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Vytvoří nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSCreatedDTO</returns>
        public Org.OpenAPITools.Client.ApiResponse<DSCreatedDTO> ApiV2DatasetyCreateWithHttpInfo(Registration data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DSCreatedDTO>("/api/v2/datasety", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Vytvoří nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSCreatedDTO</returns>
        public async System.Threading.Tasks.Task<DSCreatedDTO> ApiV2DatasetyCreateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DSCreatedDTO> localVarResponse = await ApiV2DatasetyCreateWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Vytvoří nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSCreatedDTO)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DSCreatedDTO>> ApiV2DatasetyCreateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DSCreatedDTO>("/api/v2/datasety", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Hromadné vkládání záznamů Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DSItemResponseDTO&gt;</returns>
        public List<DSItemResponseDTO> ApiV2DatasetyDatasetItemBulkInsert(string datasetId, Object data, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<DSItemResponseDTO>> localVarResponse = ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo(datasetId, data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Hromadné vkládání záznamů Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DSItemResponseDTO&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo(string datasetId, Object data, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemBulkInsert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DSItemResponseDTO>>("/api/v2/datasety/{datasetId}/zaznamy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemBulkInsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Hromadné vkládání záznamů Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DSItemResponseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<DSItemResponseDTO>> localVarResponse = await ApiV2DatasetyDatasetItemBulkInsertWithHttpInfoAsync(datasetId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Hromadné vkládání záznamů Pokud záznamy s daným ID existují, tak budou přepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektů</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DSItemResponseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<DSItemResponseDTO>>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfoAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemBulkInsert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DSItemResponseDTO>>("/api/v2/datasety/{datasetId}/zaznamy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemBulkInsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool ApiV2DatasetyDatasetItemExists(string datasetId, string itemId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = ApiV2DatasetyDatasetItemExistsWithHttpInfo(datasetId, itemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public Org.OpenAPITools.Client.ApiResponse<bool> ApiV2DatasetyDatasetItemExistsWithHttpInfo(string datasetId, string itemId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }

            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemExists";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}/existuje", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2DatasetyDatasetItemExistsAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = await ApiV2DatasetyDatasetItemExistsWithHttpInfoAsync(datasetId, itemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<bool>> ApiV2DatasetyDatasetItemExistsWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }

            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemExists";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}/existuje", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiV2DatasetyDatasetItemGet(string datasetId, string itemId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ApiV2DatasetyDatasetItemGetWithHttpInfo(datasetId, itemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiV2DatasetyDatasetItemGetWithHttpInfo(string datasetId, string itemId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }

            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiV2DatasetyDatasetItemGetAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ApiV2DatasetyDatasetItemGetWithHttpInfoAsync(datasetId, itemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme načíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiV2DatasetyDatasetItemGetWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }

            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSItemResponseDTO</returns>
        public DSItemResponseDTO ApiV2DatasetyDatasetItemUpdate(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DSItemResponseDTO> localVarResponse = ApiV2DatasetyDatasetItemUpdateWithHttpInfo(datasetId, itemId, data, mode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSItemResponseDTO</returns>
        public Org.OpenAPITools.Client.ApiResponse<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateWithHttpInfo(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }

            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DSItemResponseDTO>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSItemResponseDTO</returns>
        public async System.Threading.Tasks.Task<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateAsync(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DSItemResponseDTO> localVarResponse = await ApiV2DatasetyDatasetItemUpdateWithHttpInfoAsync(datasetId, itemId, data, mode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na něm nezmění.              \&quot;merge\&quot; - snaží se spojit data z obou záznamů.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti přepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSItemResponseDTO)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DSItemResponseDTO>> ApiV2DatasetyDatasetItemUpdateWithHttpInfoAsync(string datasetId, string itemId, Object data, string? mode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }

            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }

            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DSItemResponseDTO>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTOObject</returns>
        public SearchResultDTOObject ApiV2DatasetyDatasetSearch(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SearchResultDTOObject> localVarResponse = ApiV2DatasetyDatasetSearchWithHttpInfo(datasetId, dotaz, strana, sort, desc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTOObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<SearchResultDTOObject> ApiV2DatasetyDatasetSearchWithHttpInfo(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetSearch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            if (dotaz != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dotaz", dotaz));
            }
            if (strana != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "strana", strana));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultDTOObject>("/api/v2/datasety/{datasetId}/hledat", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTOObject</returns>
        public async System.Threading.Tasks.Task<SearchResultDTOObject> ApiV2DatasetyDatasetSearchAsync(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SearchResultDTOObject> localVarResponse = await ApiV2DatasetyDatasetSearchWithHttpInfoAsync(datasetId, dotaz, strana, sort, desc, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro řazení (optional)</param>
        /// <param name="desc">Řazení: 0 - Vzestupně; 1 - Sestupně (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTOObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SearchResultDTOObject>> ApiV2DatasetyDatasetSearchWithHttpInfoAsync(string datasetId, string? dotaz = default(string?), int? strana = default(int?), string? sort = default(string?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetSearch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            if (dotaz != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dotaz", dotaz));
            }
            if (strana != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "strana", strana));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultDTOObject>("/api/v2/datasety/{datasetId}/hledat", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool ApiV2DatasetyDelete(string datasetId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = ApiV2DatasetyDeleteWithHttpInfo(datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public Org.OpenAPITools.Client.ApiResponse<bool> ApiV2DatasetyDeleteWithHttpInfo(string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<bool>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2DatasetyDeleteAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<bool> localVarResponse = await ApiV2DatasetyDeleteWithHttpInfoAsync(datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<bool>> ApiV2DatasetyDeleteWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<bool>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        public Registration ApiV2DatasetyDetail(string datasetId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Registration> localVarResponse = ApiV2DatasetyDetailWithHttpInfo(datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        public Org.OpenAPITools.Client.ApiResponse<Registration> ApiV2DatasetyDetailWithHttpInfo(string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDetail");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDetail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Registration>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        public async System.Threading.Tasks.Task<Registration> ApiV2DatasetyDetailAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Registration> localVarResponse = await ApiV2DatasetyDetailWithHttpInfoAsync(datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (můžeme ho získat ze seznamu datasetů)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Registration>> ApiV2DatasetyDetailWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDetail");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("datasetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(datasetId)); // path parameter

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDetail";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Registration>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Načte seznam datasetů 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTORegistration</returns>
        public SearchResultDTORegistration ApiV2DatasetyGetAll(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SearchResultDTORegistration> localVarResponse = ApiV2DatasetyGetAllWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Načte seznam datasetů 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTORegistration</returns>
        public Org.OpenAPITools.Client.ApiResponse<SearchResultDTORegistration> ApiV2DatasetyGetAllWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultDTORegistration>("/api/v2/datasety", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Načte seznam datasetů 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTORegistration</returns>
        public async System.Threading.Tasks.Task<SearchResultDTORegistration> ApiV2DatasetyGetAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SearchResultDTORegistration> localVarResponse = await ApiV2DatasetyGetAllWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Načte seznam datasetů 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTORegistration)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SearchResultDTORegistration>> ApiV2DatasetyGetAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultDTORegistration>("/api/v2/datasety", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update datasetu. Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        public Registration ApiV2DatasetyUpdate(Registration data, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Registration> localVarResponse = ApiV2DatasetyUpdateWithHttpInfo(data);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update datasetu. Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        public Org.OpenAPITools.Client.ApiResponse<Registration> ApiV2DatasetyUpdateWithHttpInfo(Registration data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Registration>("/api/v2/datasety", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update datasetu. Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        public async System.Threading.Tasks.Task<Registration> ApiV2DatasetyUpdateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Registration> localVarResponse = await ApiV2DatasetyUpdateWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update datasetu. Není možné změnit hodnoty jsonSchema a datasetId. Pokud je potřebuješ změnit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Registration>> ApiV2DatasetyUpdateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = data;

            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Registration>("/api/v2/datasety", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
