using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = HlidacStatu.Api.V2.CoreApi.Client.OpenAPIDateConverter;
using HlidacStatu.Api.V2.CoreApi.Client;
using HlidacStatu.Api.V2.CoreApi.Model;
using RestSharp;
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>DSCreatedDTO</returns>
        DSCreatedDTO ApiV2DatasetyCreate (Registration data);
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>ApiResponse of DSCreatedDTO</returns>
        ApiResponse<DSCreatedDTO> ApiV2DatasetyCreateWithHttpInfo (Registration data);
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>List&lt;DSItemResponseDTO&gt;</returns>
        List<DSItemResponseDTO> ApiV2DatasetyDatasetItemBulkInsert (string datasetId, Object data);
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>ApiResponse of List&lt;DSItemResponseDTO&gt;</returns>
        ApiResponse<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo (string datasetId, Object data);
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>bool</returns>
        bool ApiV2DatasetyDatasetItemExists (string datasetId, string itemId);
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2DatasetyDatasetItemExistsWithHttpInfo (string datasetId, string itemId);
        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>Object</returns>
        Object ApiV2DatasetyDatasetItemGet (string datasetId, string itemId);
        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiV2DatasetyDatasetItemGetWithHttpInfo (string datasetId, string itemId);
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>DSItemResponseDTO</returns>
        DSItemResponseDTO ApiV2DatasetyDatasetItemUpdate (string datasetId, string itemId, Object data, string mode = default(string));
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>ApiResponse of DSItemResponseDTO</returns>
        ApiResponse<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateWithHttpInfo (string datasetId, string itemId, Object data, string mode = default(string));
        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>SearchResultDTOObject</returns>
        SearchResultDTOObject ApiV2DatasetyDatasetSearch (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string));
        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>ApiResponse of SearchResultDTOObject</returns>
        ApiResponse<SearchResultDTOObject> ApiV2DatasetyDatasetSearchWithHttpInfo (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string));
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>bool</returns>
        bool ApiV2DatasetyDelete (string datasetId);
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2DatasetyDeleteWithHttpInfo (string datasetId);
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Registration</returns>
        Registration ApiV2DatasetyDetail (string datasetId);
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>ApiResponse of Registration</returns>
        ApiResponse<Registration> ApiV2DatasetyDetailWithHttpInfo (string datasetId);
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchResultDTORegistration</returns>
        SearchResultDTORegistration ApiV2DatasetyGetAll ();
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchResultDTORegistration</returns>
        ApiResponse<SearchResultDTORegistration> ApiV2DatasetyGetAllWithHttpInfo ();
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Registration</returns>
        Registration ApiV2DatasetyUpdate (Registration data);
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>ApiResponse of Registration</returns>
        ApiResponse<Registration> ApiV2DatasetyUpdateWithHttpInfo (Registration data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of DSCreatedDTO</returns>
        System.Threading.Tasks.Task<DSCreatedDTO> ApiV2DatasetyCreateAsync (Registration data);
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of ApiResponse (DSCreatedDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSCreatedDTO>> ApiV2DatasetyCreateAsyncWithHttpInfo (Registration data);
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>Task of List&lt;DSItemResponseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertAsync (string datasetId, Object data);
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>Task of ApiResponse (List&lt;DSItemResponseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DSItemResponseDTO>>> ApiV2DatasetyDatasetItemBulkInsertAsyncWithHttpInfo (string datasetId, Object data);
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2DatasetyDatasetItemExistsAsync (string datasetId, string itemId);
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDatasetItemExistsAsyncWithHttpInfo (string datasetId, string itemId);
        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiV2DatasetyDatasetItemGetAsync (string datasetId, string itemId);
        /// <summary>
        /// Detail konkrétní položky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2DatasetyDatasetItemGetAsyncWithHttpInfo (string datasetId, string itemId);
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>Task of DSItemResponseDTO</returns>
        System.Threading.Tasks.Task<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateAsync (string datasetId, string itemId, Object data, string mode = default(string));
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>Task of ApiResponse (DSItemResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSItemResponseDTO>> ApiV2DatasetyDatasetItemUpdateAsyncWithHttpInfo (string datasetId, string itemId, Object data, string mode = default(string));
        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>Task of SearchResultDTOObject</returns>
        System.Threading.Tasks.Task<SearchResultDTOObject> ApiV2DatasetyDatasetSearchAsync (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string));
        /// <summary>
        /// Vyhledávání v položkách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>Task of ApiResponse (SearchResultDTOObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultDTOObject>> ApiV2DatasetyDatasetSearchAsyncWithHttpInfo (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string));
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2DatasetyDeleteAsync (string datasetId);
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDeleteAsyncWithHttpInfo (string datasetId);
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of Registration</returns>
        System.Threading.Tasks.Task<Registration> ApiV2DatasetyDetailAsync (string datasetId);
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyDetailAsyncWithHttpInfo (string datasetId);
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchResultDTORegistration</returns>
        System.Threading.Tasks.Task<SearchResultDTORegistration> ApiV2DatasetyGetAllAsync ();
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchResultDTORegistration)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultDTORegistration>> ApiV2DatasetyGetAllAsyncWithHttpInfo ();
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of Registration</returns>
        System.Threading.Tasks.Task<Registration> ApiV2DatasetyUpdateAsync (Registration data);
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyUpdateAsyncWithHttpInfo (Registration data);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasetyApi : IDatasetyApi
    {
        private HlidacStatu.Api.V2.CoreApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetyApi(String basePath)
        {
            this.Configuration = new HlidacStatu.Api.V2.CoreApi.Client.Configuration { BasePath = basePath };
            ExceptionFactory = HlidacStatu.Api.V2.CoreApi.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class
        /// </summary>
        /// <returns></returns>
        public DatasetyApi()
        {
            this.Configuration = HlidacStatu.Api.V2.CoreApi.Client.Configuration.Default;
            ExceptionFactory = HlidacStatu.Api.V2.CoreApi.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasetyApi(HlidacStatu.Api.V2.CoreApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = HlidacStatu.Api.V2.CoreApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = HlidacStatu.Api.V2.CoreApi.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HlidacStatu.Api.V2.CoreApi.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HlidacStatu.Api.V2.CoreApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>DSCreatedDTO</returns>
        public DSCreatedDTO ApiV2DatasetyCreate (Registration data)
        {
             ApiResponse<DSCreatedDTO> localVarResponse = ApiV2DatasetyCreateWithHttpInfo(data);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>ApiResponse of DSCreatedDTO</returns>
        public ApiResponse<DSCreatedDTO> ApiV2DatasetyCreateWithHttpInfo (Registration data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyCreate");
            var localVarPath = "/api/v2/datasety";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyCreate", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<DSCreatedDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSCreatedDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSCreatedDTO)));
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of DSCreatedDTO</returns>
        public async System.Threading.Tasks.Task<DSCreatedDTO> ApiV2DatasetyCreateAsync (Registration data)
        {
             ApiResponse<DSCreatedDTO> localVarResponse = await ApiV2DatasetyCreateAsyncWithHttpInfo(data);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of ApiResponse (DSCreatedDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSCreatedDTO>> ApiV2DatasetyCreateAsyncWithHttpInfo (Registration data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyCreate");
            var localVarPath = "/api/v2/datasety";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyCreate", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<DSCreatedDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSCreatedDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSCreatedDTO)));
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>List&lt;DSItemResponseDTO&gt;</returns>
        public List<DSItemResponseDTO> ApiV2DatasetyDatasetItemBulkInsert (string datasetId, Object data)
        {
             ApiResponse<List<DSItemResponseDTO>> localVarResponse = ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo(datasetId, data);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>ApiResponse of List&lt;DSItemResponseDTO&gt;</returns>
        public ApiResponse<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo (string datasetId, Object data)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemBulkInsert", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<DSItemResponseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DSItemResponseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DSItemResponseDTO>)));
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>Task of List&lt;DSItemResponseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertAsync (string datasetId, Object data)
        {
             ApiResponse<List<DSItemResponseDTO>> localVarResponse = await ApiV2DatasetyDatasetItemBulkInsertAsyncWithHttpInfo(datasetId, data);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový požadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <returns>Task of ApiResponse (List&lt;DSItemResponseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DSItemResponseDTO>>> ApiV2DatasetyDatasetItemBulkInsertAsyncWithHttpInfo (string datasetId, Object data)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemBulkInsert", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<List<DSItemResponseDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DSItemResponseDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DSItemResponseDTO>)));
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>bool</returns>
        public bool ApiV2DatasetyDatasetItemExists (string datasetId, string itemId)
        {
             ApiResponse<bool> localVarResponse = ApiV2DatasetyDatasetItemExistsWithHttpInfo(datasetId, itemId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>ApiResponse of bool</returns>
        public ApiResponse<bool> ApiV2DatasetyDatasetItemExistsWithHttpInfo (string datasetId, string itemId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy/{itemId}/existuje";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemExists", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2DatasetyDatasetItemExistsAsync (string datasetId, string itemId)
        {
             ApiResponse<bool> localVarResponse = await ApiV2DatasetyDatasetItemExistsAsyncWithHttpInfo(datasetId, itemId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDatasetItemExistsAsyncWithHttpInfo (string datasetId, string itemId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy/{itemId}/existuje";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemExists", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }
        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>Object</returns>
        public Object ApiV2DatasetyDatasetItemGet (string datasetId, string itemId)
        {
             ApiResponse<Object> localVarResponse = ApiV2DatasetyDatasetItemGetWithHttpInfo(datasetId, itemId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ApiV2DatasetyDatasetItemGetWithHttpInfo (string datasetId, string itemId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemGet", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiV2DatasetyDatasetItemGetAsync (string datasetId, string itemId)
        {
             ApiResponse<Object> localVarResponse = await ApiV2DatasetyDatasetItemGetAsyncWithHttpInfo(datasetId, itemId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétní položky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id položky v datasetu, kterou chceme nacíst</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2DatasetyDatasetItemGetAsyncWithHttpInfo (string datasetId, string itemId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemGet", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>DSItemResponseDTO</returns>
        public DSItemResponseDTO ApiV2DatasetyDatasetItemUpdate (string datasetId, string itemId, Object data, string mode = default(string))
        {
             ApiResponse<DSItemResponseDTO> localVarResponse = ApiV2DatasetyDatasetItemUpdateWithHttpInfo(datasetId, itemId, data, mode);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>ApiResponse of DSItemResponseDTO</returns>
        public ApiResponse<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateWithHttpInfo (string datasetId, string itemId, Object data, string mode = default(string))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemUpdate", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<DSItemResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSItemResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSItemResponseDTO)));
        }
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>Task of DSItemResponseDTO</returns>
        public async System.Threading.Tasks.Task<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateAsync (string datasetId, string itemId, Object data, string mode = default(string))
        {
             ApiResponse<DSItemResponseDTO> localVarResponse = await ApiV2DatasetyDatasetItemUpdateAsyncWithHttpInfo(datasetId, itemId, data, mode);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Vloží nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vložit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaží se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <returns>Task of ApiResponse (DSItemResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSItemResponseDTO>> ApiV2DatasetyDatasetItemUpdateAsyncWithHttpInfo (string datasetId, string itemId, Object data, string mode = default(string))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            var localVarPath = "/api/v2/datasety/{datasetId}/zaznamy/{itemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (itemId != null) localVarPathParams.Add("itemId", this.Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetItemUpdate", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<DSItemResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DSItemResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DSItemResponseDTO)));
        }
        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>SearchResultDTOObject</returns>
        public SearchResultDTOObject ApiV2DatasetyDatasetSearch (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string))
        {
             ApiResponse<SearchResultDTOObject> localVarResponse = ApiV2DatasetyDatasetSearchWithHttpInfo(datasetId, dotaz, strana, sort, desc);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>ApiResponse of SearchResultDTOObject</returns>
        public ApiResponse<SearchResultDTOObject> ApiV2DatasetyDatasetSearchWithHttpInfo (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetSearch");
            var localVarPath = "/api/v2/datasety/{datasetId}/hledat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (dotaz != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dotaz", dotaz)); // query parameter
            if (strana != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "strana", strana)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (desc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "desc", desc)); // query parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetSearch", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<SearchResultDTOObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResultDTOObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResultDTOObject)));
        }
        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>Task of SearchResultDTOObject</returns>
        public async System.Threading.Tasks.Task<SearchResultDTOObject> ApiV2DatasetyDatasetSearchAsync (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string))
        {
             ApiResponse<SearchResultDTOObject> localVarResponse = await ApiV2DatasetyDatasetSearchAsyncWithHttpInfo(datasetId, dotaz, strana, sort, desc);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Vyhledávání v položkách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <returns>Task of ApiResponse (SearchResultDTOObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchResultDTOObject>> ApiV2DatasetyDatasetSearchAsyncWithHttpInfo (string datasetId, string dotaz = default(string), int strana = default(int), string sort = default(string), string desc = default(string))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetSearch");
            var localVarPath = "/api/v2/datasety/{datasetId}/hledat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            if (dotaz != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dotaz", dotaz)); // query parameter
            if (strana != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "strana", strana)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (desc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "desc", desc)); // query parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDatasetSearch", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<SearchResultDTOObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResultDTOObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResultDTOObject)));
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>bool</returns>
        public bool ApiV2DatasetyDelete (string datasetId)
        {
             ApiResponse<bool> localVarResponse = ApiV2DatasetyDeleteWithHttpInfo(datasetId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>ApiResponse of bool</returns>
        public ApiResponse<bool> ApiV2DatasetyDeleteWithHttpInfo (string datasetId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDelete");
            var localVarPath = "/api/v2/datasety/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDelete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2DatasetyDeleteAsync (string datasetId)
        {
             ApiResponse<bool> localVarResponse = await ApiV2DatasetyDeleteAsyncWithHttpInfo(datasetId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDeleteAsyncWithHttpInfo (string datasetId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDelete");
            var localVarPath = "/api/v2/datasety/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDelete", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Registration</returns>
        public Registration ApiV2DatasetyDetail (string datasetId)
        {
             ApiResponse<Registration> localVarResponse = ApiV2DatasetyDetailWithHttpInfo(datasetId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>ApiResponse of Registration</returns>
        public ApiResponse<Registration> ApiV2DatasetyDetailWithHttpInfo (string datasetId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDetail");
            var localVarPath = "/api/v2/datasety/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDetail", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Registration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Registration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Registration)));
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of Registration</returns>
        public async System.Threading.Tasks.Task<Registration> ApiV2DatasetyDetailAsync (string datasetId)
        {
             ApiResponse<Registration> localVarResponse = await ApiV2DatasetyDetailAsyncWithHttpInfo(datasetId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mužeme ho získat ze seznamu datasetu)</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyDetailAsyncWithHttpInfo (string datasetId)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
                throw new ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDetail");
            var localVarPath = "/api/v2/datasety/{datasetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (datasetId != null) localVarPathParams.Add("datasetId", this.Configuration.ApiClient.ParameterToString(datasetId)); // path parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyDetail", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Registration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Registration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Registration)));
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SearchResultDTORegistration</returns>
        public SearchResultDTORegistration ApiV2DatasetyGetAll ()
        {
             ApiResponse<SearchResultDTORegistration> localVarResponse = ApiV2DatasetyGetAllWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SearchResultDTORegistration</returns>
        public ApiResponse<SearchResultDTORegistration> ApiV2DatasetyGetAllWithHttpInfo ()
        {
            var localVarPath = "/api/v2/datasety";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyGetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<SearchResultDTORegistration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResultDTORegistration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResultDTORegistration)));
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SearchResultDTORegistration</returns>
        public async System.Threading.Tasks.Task<SearchResultDTORegistration> ApiV2DatasetyGetAllAsync ()
        {
             ApiResponse<SearchResultDTORegistration> localVarResponse = await ApiV2DatasetyGetAllAsyncWithHttpInfo();
             return localVarResponse.Data;
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SearchResultDTORegistration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchResultDTORegistration>> ApiV2DatasetyGetAllAsyncWithHttpInfo ()
        {
            var localVarPath = "/api/v2/datasety";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyGetAll", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<SearchResultDTORegistration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResultDTORegistration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResultDTORegistration)));
        }
        /// <summary>
        /// Update datasetu. Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Registration</returns>
        public Registration ApiV2DatasetyUpdate (Registration data)
        {
             ApiResponse<Registration> localVarResponse = ApiV2DatasetyUpdateWithHttpInfo(data);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update datasetu. Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>ApiResponse of Registration</returns>
        public ApiResponse<Registration> ApiV2DatasetyUpdateWithHttpInfo (Registration data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyUpdate");
            var localVarPath = "/api/v2/datasety";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyUpdate", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Registration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Registration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Registration)));
        }
        /// <summary>
        /// Update datasetu. Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of Registration</returns>
        public async System.Threading.Tasks.Task<Registration> ApiV2DatasetyUpdateAsync (Registration data)
        {
             ApiResponse<Registration> localVarResponse = await ApiV2DatasetyUpdateAsyncWithHttpInfo(data);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Update datasetu. Není možné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuješ zmenit,   musíš datovou sadu smazat a zaregistrovat znovu.    Ukázkový požadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.CoreApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyUpdateAsyncWithHttpInfo (Registration data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyUpdate");
            var localVarPath = "/api/v2/datasety";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2DatasetyUpdate", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<Registration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Registration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Registration)));
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
    public partial class ApiClient
    {
        private JsonSerializerSettings serializerSettings = new JsonSerializerSettings
        {
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
        };
        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(IRestRequest request);
        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(IRestRequest request, IRestResponse response);
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        public ApiClient()
        {
            Configuration = HlidacStatu.Api.V2.CoreApi.Client.Configuration.Default;
            RestClient = new RestClient("https://api.hlidacstatu.cz");
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default base path (https://api.hlidacstatu.cz).
        /// </summary>
        /// <param name="config">An instance of Configuration.</param>
        public ApiClient(Configuration config)
        {
            Configuration = config ?? HlidacStatu.Api.V2.CoreApi.Client.Configuration.Default;
            RestClient = new RestClient(Configuration.BasePath);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        /// <param name="basePath">The base path.</param>
        public ApiClient(String basePath = "https://api.hlidacstatu.cz")
        {
           if (String.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");
            RestClient = new RestClient(basePath);
            Configuration = Client.Configuration.Default;
        }
        /// <summary>
        /// Gets or sets the default API client for making HTTP calls.
        /// </summary>
        /// <value>The default API client.</value>
        [Obsolete("ApiClient.Default is deprecated, please use 'Configuration.Default.ApiClient' instead.")]
        public static ApiClient Default;
        /// <summary>
        /// Gets or sets an instance of the IReadableConfiguration.
        /// </summary>
        /// <value>An instance of the IReadableConfiguration.</value>
        /// <remarks>
        /// <see cref="IReadableConfiguration"/> helps us to avoid modifying possibly global
        /// configuration values from within a given client. It does not guarantee thread-safety
        /// of the <see cref="Configuration"/> instance in any way.
        /// </remarks>
        public IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Gets or sets the RestClient.
        /// </summary>
        /// <value>An instance of the RestClient</value>
        public RestClient RestClient { get; set; }
        // Creates and sets up a RestRequest prior to a call.
        private RestRequest PrepareRequest(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = new RestRequest(path, method);
            // add path parameter, if any
            foreach(var param in pathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);
            // add header parameter, if any
            foreach(var param in headerParams)
                request.AddHeader(param.Key, param.Value);
            // add query parameter, if any
            foreach(var param in queryParams)
                request.AddQueryParameter(param.Key, param.Value);
            // add form parameter, if any
            foreach(var param in formParams)
                request.AddParameter(param.Key, param.Value);
            // add file parameter, if any
            foreach(var param in fileParams)
            {
                request.AddFile(param.Value.Name, param.Value.Writer, param.Value.FileName, param.Value.ContentLength, param.Value.ContentType);
            }
            if (postBody != null) // http body (model or byte[]) parameter
            {
                request.AddParameter(contentType, postBody, ParameterType.RequestBody);
            }
            return request;
        }
        /// <summary>
        /// Makes the HTTP request (Sync).
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content Type of the request</param>
        /// <returns>Object</returns>
        public Object CallApi(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);
            // set timeout
            RestClient.Timeout = Configuration.Timeout;
            // set user agent
            RestClient.UserAgent = Configuration.UserAgent;
            InterceptRequest(request);
            var response = RestClient.Execute(request);
            InterceptResponse(request, response);
            return (Object) response;
        }
        /// <summary>
        /// Makes the asynchronous HTTP request.
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content type.</param>
        /// <returns>The Task instance.</returns>
        public async System.Threading.Tasks.Task<Object> CallApiAsync(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);
            RestClient.UserAgent = Configuration.UserAgent;
            InterceptRequest(request);
            var response = await RestClient.ExecuteTaskAsync(request);
            InterceptResponse(request, response);
            return (Object)response;
        }
        /// <summary>
        /// Escape string (url-encoded).
        /// </summary>
        /// <param name="str">String to be escaped.</param>
        /// <returns>Escaped string.</returns>
        public string EscapeString(string str)
        {
            return UrlEncode(str);
        }
        /// <summary>
        /// Create FileParameter based on Stream.
        /// </summary>
        /// <param name="name">Parameter name.</param>
        /// <param name="stream">Input stream.</param>
        /// <returns>FileParameter.</returns>
        public FileParameter ParameterToFile(string name, Stream stream)
        {
            if (stream is FileStream)
                return FileParameter.Create(name, ReadAsBytes(stream), Path.GetFileName(((FileStream)stream).Name));
            else
                return FileParameter.Create(name, ReadAsBytes(stream), "no_file_name_provided");
        }
        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public string ParameterToString(object obj)
        {
            if (obj is DateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return ((DateTime)obj).ToString (Configuration.DateTimeFormat);
            else if (obj is DateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return ((DateTimeOffset)obj).ToString (Configuration.DateTimeFormat);
            else if (obj is bool)
                return (bool)obj ? "true" : "false";
            else if (obj is IList)
            {
                var flattenedString = new StringBuilder();
                foreach (var param in (IList)obj)
                {
                    if (flattenedString.Length > 0)
                        flattenedString.Append(",");
                    flattenedString.Append(param);
                }
                return flattenedString.ToString();
            }
            else
                return Convert.ToString (obj);
        }
        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        public object Deserialize(IRestResponse response, Type type)
        {
            IList<Parameter> headers = response.Headers;
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }
            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                if (headers != null)
                {
                    var filePath = String.IsNullOrEmpty(Configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : Configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, response.RawBytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(response.RawBytes);
                return stream;
            }
            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content,  null, System.Globalization.DateTimeStyles.RoundtripKind);
            }
            if (type == typeof(String) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return ConvertType(response.Content, type);
            }
            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        /// <summary>
        /// Serialize an input (model) into JSON string
        /// </summary>
        /// <param name="obj">Object.</param>
        /// <returns>JSON string.</returns>
        public String Serialize(object obj)
        {
            try
            {
                return obj != null ? JsonConvert.SerializeObject(obj) : null;
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        /// <summary>
        ///Check if the given MIME is a JSON MIME.
        ///JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public bool IsJsonMime(String mime)
        {
            var jsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
            return mime != null && (jsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json"));
        }
        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public String SelectHeaderContentType(String[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return "application/json";
            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType.ToLower()))
                    return contentType;
            }
            return contentTypes[0]; // use the first content type specified in 'consumes'
        }
        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public String SelectHeaderAccept(String[] accepts)
        {
            if (accepts.Length == 0)
                return null;
            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";
            return String.Join(",", accepts);
        }
        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">String to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
        }
        /// <summary>
        /// Dynamically cast the object into target type.
        /// </summary>
        /// <param name="fromObject">Object to be casted</param>
        /// <param name="toObject">Target type</param>
        /// <returns>Casted object</returns>
        public static dynamic ConvertType(dynamic fromObject, Type toObject)
        {
            return Convert.ChangeType(fromObject, toObject);
        }
        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            byte[] buf = new byte[16*1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int count;
                while ((count = inputStream.Read(buf, 0, buf.Length)) > 0)
                {
                    ms.Write(buf, 0, count);
                }
                return ms.ToArray();
            }
        }
        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">String to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }
            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;
            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);
                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }
            return sb.ToString();
        }
        /// <summary>
        /// Sanitize filename by removing the path
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Filename</returns>
        public static string SanitizeFilename(string filename)
        {
            Match match = Regex.Match(filename, @".*[/\\](.*)$");
            if (match.Success)
            {
                return match.Groups[1].Value;
            }
            else
            {
                return filename;
            }
        }
        /// <summary>
        /// Convert params to key/value pairs. 
        /// Use collectionFormat to properly format lists and collections.
        /// </summary>
        /// <param name="name">Key name.</param>
        /// <param name="value">Value object.</param>
        /// <returns>A list of KeyValuePairs</returns>
        public IEnumerable<KeyValuePair<string, string>> ParameterToKeyValuePairs(string collectionFormat, string name, object value)
        {
            var parameters = new List<KeyValuePair<string, string>>();
            if (IsCollection(value) && collectionFormat == "multi")
            {
                var valueCollection = value as IEnumerable;
                parameters.AddRange(from object item in valueCollection select new KeyValuePair<string, string>(name, ParameterToString(item)));
            }
            else
            {
                parameters.Add(new KeyValuePair<string, string>(name, ParameterToString(value)));
            }
            return parameters;
        }
        /// <summary>
        /// Check if generic object is a collection.
        /// </summary>
        /// <param name="value"></param>
        /// <returns>True if object is a collection type</returns>
        private static bool IsCollection(object value)
        {
            return value is IList || value is ICollection;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    public class ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int ErrorCode { get; set; }
        /// <summary>
        /// Gets or sets the error content (body json object)
        /// </summary>
        /// <value>The error content (Http response body).</value>
        public dynamic ErrorContent { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        public ApiException() {}
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public ApiException(int errorCode, string message) : base(message)
        {
            this.ErrorCode = errorCode;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        public ApiException(int errorCode, string message, dynamic errorContent = null) : base(message)
        {
            this.ErrorCode = errorCode;
            this.ErrorContent = errorContent;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// API Response
    /// </summary>
    public class ApiResponse<T>
    {
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public int StatusCode { get; private set; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public IDictionary<string, string> Headers { get; private set; }
        /// <summary>
        /// Gets or sets the data (parsed HTTP body)
        /// </summary>
        /// <value>The data.</value>
        public T Data { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse&lt;T&gt;" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(int statusCode, IDictionary<string, string> headers, T data)
        {
            this.StatusCode= statusCode;
            this.Headers = headers;
            this.Data = data;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// Represents a set of configuration settings
    /// </summary>
    public class Configuration : IReadableConfiguration
    {
        #region Constants
        /// <summary>
        /// Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "1.0.0";
        /// <summary>
        /// Identifier for ISO 8601 DateTime Format
        /// </summary>
        /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        // ReSharper disable once InconsistentNaming
        public const string ISO8601_DATETIME_FORMAT = "o";
        #endregion Constants
        #region Static Members
        private static readonly object GlobalConfigSync = new { };
        private static Configuration _globalConfiguration;
        /// <summary>
        /// Default creation of exceptions for a given method name and response object
        /// </summary>
        public static readonly ExceptionFactory DefaultExceptionFactory = (methodName, response) =>
        {
            var status = (int)response.StatusCode;
            if (status >= 400)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.Content),
                    response.Content);
            }
            if (status == 0)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.ErrorMessage), response.ErrorMessage);
            }
            return null;
        };
        /// <summary>
        /// Gets or sets the default Configuration.
        /// </summary>
        /// <value>Configuration.</value>
        public static Configuration Default
        {
            get { return _globalConfiguration; }
            set
            {
                lock (GlobalConfigSync)
                {
                    _globalConfiguration = value;
                }
            }
        }
        #endregion Static Members
        #region Private Members
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        private IDictionary<string, string> _apiKey = null;
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        private IDictionary<string, string> _apiKeyPrefix = null;
        private string _dateTimeFormat = ISO8601_DATETIME_FORMAT;
        private string _tempFolderPath = Path.GetTempPath();
        #endregion Private Members
        #region Constructors
        static Configuration()
        {
            _globalConfiguration = new GlobalConfiguration();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        public Configuration()
        {
            UserAgent = "OpenAPI-Generator/1.0.0/csharp";
            BasePath = "https://api.hlidacstatu.cz";
            DefaultHeader = new ConcurrentDictionary<string, string>();
            ApiKey = new ConcurrentDictionary<string, string>();
            ApiKeyPrefix = new ConcurrentDictionary<string, string>();
            // Setting Timeout has side effects (forces ApiClient creation).
            Timeout = 100000;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        public Configuration(
            IDictionary<string, string> defaultHeader,
            IDictionary<string, string> apiKey,
            IDictionary<string, string> apiKeyPrefix,
            string basePath = "https://api.hlidacstatu.cz") : this()
        {
            if (string.IsNullOrWhiteSpace(basePath))
                throw new ArgumentException("The provided basePath is invalid.", "basePath");
            if (defaultHeader == null)
                throw new ArgumentNullException("defaultHeader");
            if (apiKey == null)
                throw new ArgumentNullException("apiKey");
            if (apiKeyPrefix == null)
                throw new ArgumentNullException("apiKeyPrefix");
            BasePath = basePath;
            foreach (var keyValuePair in defaultHeader)
            {
                DefaultHeader.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKey)
            {
                ApiKey.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKeyPrefix)
            {
                ApiKeyPrefix.Add(keyValuePair);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class with different settings
        /// </summary>
        /// <param name="apiClient">Api client</param>
        /// <param name="defaultHeader">Dictionary of default HTTP header</param>
        /// <param name="username">Username</param>
        /// <param name="password">Password</param>
        /// <param name="accessToken">accessToken</param>
        /// <param name="apiKey">Dictionary of API key</param>
        /// <param name="apiKeyPrefix">Dictionary of API key prefix</param>
        /// <param name="tempFolderPath">Temp folder path</param>
        /// <param name="dateTimeFormat">DateTime format string</param>
        /// <param name="timeout">HTTP connection timeout (in milliseconds)</param>
        /// <param name="userAgent">HTTP user agent</param>
        [Obsolete("Use explicit object construction and setting of properties.", true)]
        public Configuration(
            // ReSharper disable UnusedParameter.Local
            ApiClient apiClient = null,
            IDictionary<string, string> defaultHeader = null,
            string username = null,
            string password = null,
            string accessToken = null,
            IDictionary<string, string> apiKey = null,
            IDictionary<string, string> apiKeyPrefix = null,
            string tempFolderPath = null,
            string dateTimeFormat = null,
            int timeout = 100000,
            string userAgent = "OpenAPI-Generator/1.0.0/csharp"
            // ReSharper restore UnusedParameter.Local
            )
        {
        }
        /// <summary>
        /// Initializes a new instance of the Configuration class.
        /// </summary>
        /// <param name="apiClient">Api client.</param>
        [Obsolete("This constructor caused unexpected sharing of static data. It is no longer supported.", true)]
        // ReSharper disable once UnusedParameter.Local
        public Configuration(ApiClient apiClient)
        {
        }
        #endregion Constructors
        #region Properties
        private ApiClient _apiClient = null;
        /// <summary>
        /// Gets an instance of an ApiClient for this configuration
        /// </summary>
        public virtual ApiClient ApiClient
        {
            get
            {
                if (_apiClient == null) _apiClient = CreateApiClient();
                return _apiClient;
            }
        }
        private String _basePath = null;
        /// <summary>
        /// Gets or sets the base path for API access.
        /// </summary>
        public virtual string BasePath {
            get { return _basePath; }
            set {
                _basePath = value;
                // pass-through to ApiClient if it's set.
                if(_apiClient != null) {
                    _apiClient.RestClient.BaseUrl = new Uri(_basePath);
                }
            }
        }
        /// <summary>
        /// Gets or sets the default header.
        /// </summary>
        public virtual IDictionary<string, string> DefaultHeader { get; set; }
        /// <summary>
        /// Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
        /// </summary>
        public virtual int Timeout
        {
            get { return ApiClient.RestClient.Timeout; }
            set { ApiClient.RestClient.Timeout = value; }
        }
        /// <summary>
        /// Gets or sets the HTTP user agent.
        /// </summary>
        /// <value>Http user agent.</value>
        public virtual string UserAgent { get; set; }
        /// <summary>
        /// Gets or sets the username (HTTP basic authentication).
        /// </summary>
        /// <value>The username.</value>
        public virtual string Username { get; set; }
        /// <summary>
        /// Gets or sets the password (HTTP basic authentication).
        /// </summary>
        /// <value>The password.</value>
        public virtual string Password { get; set; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        public string GetApiKeyWithPrefix(string apiKeyIdentifier)
        {
            var apiKeyValue = "";
            ApiKey.TryGetValue (apiKeyIdentifier, out apiKeyValue);
            var apiKeyPrefix = "";
            if (ApiKeyPrefix.TryGetValue (apiKeyIdentifier, out apiKeyPrefix))
                return apiKeyPrefix + " " + apiKeyValue;
            else
                return apiKeyValue;
        }
        /// <summary>
        /// Gets or sets the access token for OAuth2 authentication.
        /// </summary>
        /// <value>The access token.</value>
        public virtual string AccessToken { get; set; }
        /// <summary>
        /// Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public virtual string TempFolderPath
        {
            get { return _tempFolderPath; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    _tempFolderPath = Path.GetTempPath();
                    return;
                }
                // create the directory if it does not exist
                if (!Directory.Exists(value))
                {
                    Directory.CreateDirectory(value);
                }
                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                {
                    _tempFolderPath = value;
                }
                else
                {
                    _tempFolderPath = value + Path.DirectorySeparatorChar;
                }
            }
        }
        /// <summary>
        /// Gets or sets the date time format used when serializing in the ApiClient
        /// By default, it's set to ISO 8601 - "o", for others see:
        /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
        /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
        /// No validation is done to ensure that the string you're providing is valid
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public virtual string DateTimeFormat
        {
            get { return _dateTimeFormat; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Never allow a blank or null string, go back to the default
                    _dateTimeFormat = ISO8601_DATETIME_FORMAT;
                    return;
                }
                // Caution, no validation when you choose date time format other than ISO 8601
                // Take a look at the above links
                _dateTimeFormat = value;
            }
        }
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        public virtual IDictionary<string, string> ApiKeyPrefix
        {
            get { return _apiKeyPrefix; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKeyPrefix collection may not be null.");
                }
                _apiKeyPrefix = value;
            }
        }
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        public virtual IDictionary<string, string> ApiKey
        {
            get { return _apiKey; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKey collection may not be null.");
                }
                _apiKey = value;
            }
        }
        #endregion Properties
        #region Methods
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        public void AddDefaultHeader(string key, string value)
        {
            DefaultHeader[key] = value;
        }
        /// <summary>
        /// Creates a new <see cref="ApiClient" /> based on this <see cref="Configuration" /> instance.
        /// </summary>
        /// <returns></returns>
        public ApiClient CreateApiClient()
        {
            return new ApiClient(BasePath) { Configuration = this };
        }
        /// <summary>
        /// Returns a string with essential information for debugging.
        /// </summary>
        public static String ToDebugReport()
        {
            String report = "C# SDK (HlidacStatu.Api.V2.CoreApi) Debug Report:\n";
            report += "    OS: " + System.Environment.OSVersion + "\n";
            report += "    .NET Framework Version: " + System.Environment.Version  + "\n";
            report += "    Version of the API: v2\n";
            report += "    SDK Package Version: 1.0.0\n";
            return report;
        }
        /// <summary>
        /// Add Api Key Header.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        /// <returns></returns>
        public void AddApiKey(string key, string value)
        {
            ApiKey[key] = value;
        }
        /// <summary>
        /// Sets the API key prefix.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        public void AddApiKeyPrefix(string key, string value)
        {
            ApiKeyPrefix[key] = value;
        }
        #endregion Methods
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// A delegate to ExceptionFactory method
    /// </summary>
    /// <param name="methodName">Method name</param>
    /// <param name="response">Response</param>
    /// <returns>Exceptions</returns>
    public delegate Exception ExceptionFactory(string methodName, IRestResponse response);
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// <see cref="GlobalConfiguration"/> provides a compile-time extension point for globally configuring
    /// API Clients.
    /// </summary>
    /// <remarks>
    /// A customized implementation via partial class may reside in another file and may
    /// be excluded from automatic generation via a .openapi-generator-ignore file.
    /// </remarks>
    public partial class GlobalConfiguration : Configuration
    {
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// Represents configuration aspects required to interact with the API endpoints.
    /// </summary>
    public interface IApiAccessor
    {
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        Configuration Configuration {get; set;}
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        String GetBasePath();
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        ExceptionFactory ExceptionFactory { get; set; }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// Represents a readable-only configuration contract.
    /// </summary>
    public interface IReadableConfiguration
    {
        /// <summary>
        /// Gets the access token.
        /// </summary>
        /// <value>Access token.</value>
        string AccessToken { get; }
        /// <summary>
        /// Gets the API key.
        /// </summary>
        /// <value>API key.</value>
        IDictionary<string, string> ApiKey { get; }
        /// <summary>
        /// Gets the API key prefix.
        /// </summary>
        /// <value>API key prefix.</value>
        IDictionary<string, string> ApiKeyPrefix { get; }
        /// <summary>
        /// Gets the base path.
        /// </summary>
        /// <value>Base path.</value>
        string BasePath { get; }
        /// <summary>
        /// Gets the date time format.
        /// </summary>
        /// <value>Date time foramt.</value>
        string DateTimeFormat { get; }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <value>Default header.</value>
        IDictionary<string, string> DefaultHeader { get; }
        /// <summary>
        /// Gets the temp folder path.
        /// </summary>
        /// <value>Temp folder path.</value>
        string TempFolderPath { get; }
        /// <summary>
        /// Gets the HTTP connection timeout (in milliseconds)
        /// </summary>
        /// <value>HTTP connection timeout.</value>
        int Timeout { get; }
        /// <summary>
        /// Gets the user agent.
        /// </summary>
        /// <value>User agent.</value>
        string UserAgent { get; }
        /// <summary>
        /// Gets the username.
        /// </summary>
        /// <value>Username.</value>
        string Username { get; }
        /// <summary>
        /// Gets the password.
        /// </summary>
        /// <value>Password.</value>
        string Password { get; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        string GetApiKeyWithPrefix(string apiKeyIdentifier);
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Client
{
    /// <summary>
    /// Formatter for 'date' openapi formats ss defined by full-date - RFC3339
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
    /// </summary>
    public class OpenAPIDateConverter : IsoDateTimeConverter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenAPIDateConverter" /> class.
        /// </summary>
        public OpenAPIDateConverter()
        {
            // full-date   = date-fullyear "-" date-month "-" date-mday
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Model
{
    /// <summary>
    /// DSCreatedDTO
    /// </summary>
    [DataContract]
    public partial class DSCreatedDTO :  IEquatable<DSCreatedDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DSCreatedDTO" /> class.
        /// </summary>
        /// <param name="datasetId">datasetId.</param>
        public DSCreatedDTO(string datasetId = default(string))
        {
            this.DatasetId = datasetId;
        }
        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name="DatasetId", EmitDefaultValue=false)]
        public string DatasetId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSCreatedDTO {\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DSCreatedDTO);
        }
        /// <summary>
        /// Returns true if DSCreatedDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DSCreatedDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSCreatedDTO input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.DatasetId == input.DatasetId ||
                    (this.DatasetId != null &&
                    this.DatasetId.Equals(input.DatasetId))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatasetId != null)
                    hashCode = hashCode * 59 + this.DatasetId.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Model
{
    /// <summary>
    /// DSItemResponseDTO
    /// </summary>
    [DataContract]
    public partial class DSItemResponseDTO :  IEquatable<DSItemResponseDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DSItemResponseDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        public DSItemResponseDTO(string id = default(string))
        {
            this.Id = id;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSItemResponseDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DSItemResponseDTO);
        }
        /// <summary>
        /// Returns true if DSItemResponseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DSItemResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSItemResponseDTO input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Model
{
    /// <summary>
    /// Registration
    /// </summary>
    [DataContract]
    public partial class Registration :  IEquatable<Registration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Registration" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="datasetId">datasetId.</param>
        /// <param name="origUrl">origUrl.</param>
        /// <param name="sourcecodeUrl">sourcecodeUrl.</param>
        /// <param name="description">description.</param>
        /// <param name="jsonSchema">jsonSchema.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="created">created.</param>
        /// <param name="betaversion">betaversion.</param>
        /// <param name="allowWriteAccess">allowWriteAccess.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="searchResultTemplate">searchResultTemplate.</param>
        /// <param name="detailTemplate">detailTemplate.</param>
        /// <param name="defaultOrderBy">defaultOrderBy.</param>
        /// <param name="orderList">orderList.</param>
        public Registration(string name = default(string), string datasetId = default(string), string origUrl = default(string), string sourcecodeUrl = default(string), string description = default(string), string jsonSchema = default(string), string createdBy = default(string), DateTime created = default(DateTime), bool betaversion = default(bool), bool allowWriteAccess = default(bool), bool hidden = default(bool), Template searchResultTemplate = default(Template), Template detailTemplate = default(Template), string defaultOrderBy = default(string), string[,] orderList = default(string[,]))
        {
            this.Name = name;
            this.DatasetId = datasetId;
            this.OrigUrl = origUrl;
            this.SourcecodeUrl = sourcecodeUrl;
            this.Description = description;
            this.JsonSchema = jsonSchema;
            this.CreatedBy = createdBy;
            this.Created = created;
            this.Betaversion = betaversion;
            this.AllowWriteAccess = allowWriteAccess;
            this.Hidden = hidden;
            this.SearchResultTemplate = searchResultTemplate;
            this.DetailTemplate = detailTemplate;
            this.DefaultOrderBy = defaultOrderBy;
            this.OrderList = orderList;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name="datasetId", EmitDefaultValue=false)]
        public string DatasetId { get; set; }
        /// <summary>
        /// Gets or Sets OrigUrl
        /// </summary>
        [DataMember(Name="origUrl", EmitDefaultValue=false)]
        public string OrigUrl { get; set; }
        /// <summary>
        /// Gets or Sets SourcecodeUrl
        /// </summary>
        [DataMember(Name="sourcecodeUrl", EmitDefaultValue=false)]
        public string SourcecodeUrl { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets JsonSchema
        /// </summary>
        [DataMember(Name="jsonSchema", EmitDefaultValue=false)]
        public string JsonSchema { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }
        /// <summary>
        /// Gets or Sets Betaversion
        /// </summary>
        [DataMember(Name="betaversion", EmitDefaultValue=false)]
        public bool Betaversion { get; set; }
        /// <summary>
        /// Gets or Sets AllowWriteAccess
        /// </summary>
        [DataMember(Name="allowWriteAccess", EmitDefaultValue=false)]
        public bool AllowWriteAccess { get; set; }
        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool Hidden { get; set; }
        /// <summary>
        /// Gets or Sets SearchResultTemplate
        /// </summary>
        [DataMember(Name="searchResultTemplate", EmitDefaultValue=false)]
        public Template SearchResultTemplate { get; set; }
        /// <summary>
        /// Gets or Sets DetailTemplate
        /// </summary>
        [DataMember(Name="detailTemplate", EmitDefaultValue=false)]
        public Template DetailTemplate { get; set; }
        /// <summary>
        /// Gets or Sets DefaultOrderBy
        /// </summary>
        [DataMember(Name="defaultOrderBy", EmitDefaultValue=false)]
        public string DefaultOrderBy { get; set; }
        /// <summary>
        /// Gets or Sets OrderList
        /// </summary>
        [DataMember(Name="orderList", EmitDefaultValue=false)]
        public string[,] OrderList { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Registration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  OrigUrl: ").Append(OrigUrl).Append("\n");
            sb.Append("  SourcecodeUrl: ").Append(SourcecodeUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  JsonSchema: ").Append(JsonSchema).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Betaversion: ").Append(Betaversion).Append("\n");
            sb.Append("  AllowWriteAccess: ").Append(AllowWriteAccess).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  SearchResultTemplate: ").Append(SearchResultTemplate).Append("\n");
            sb.Append("  DetailTemplate: ").Append(DetailTemplate).Append("\n");
            sb.Append("  DefaultOrderBy: ").Append(DefaultOrderBy).Append("\n");
            sb.Append("  OrderList: ").Append(OrderList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Registration);
        }
        /// <summary>
        /// Returns true if Registration instances are equal
        /// </summary>
        /// <param name="input">Instance of Registration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Registration input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DatasetId == input.DatasetId ||
                    (this.DatasetId != null &&
                    this.DatasetId.Equals(input.DatasetId))
                ) && 
                (
                    this.OrigUrl == input.OrigUrl ||
                    (this.OrigUrl != null &&
                    this.OrigUrl.Equals(input.OrigUrl))
                ) && 
                (
                    this.SourcecodeUrl == input.SourcecodeUrl ||
                    (this.SourcecodeUrl != null &&
                    this.SourcecodeUrl.Equals(input.SourcecodeUrl))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.JsonSchema == input.JsonSchema ||
                    (this.JsonSchema != null &&
                    this.JsonSchema.Equals(input.JsonSchema))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Betaversion == input.Betaversion ||
                    (this.Betaversion != null &&
                    this.Betaversion.Equals(input.Betaversion))
                ) && 
                (
                    this.AllowWriteAccess == input.AllowWriteAccess ||
                    (this.AllowWriteAccess != null &&
                    this.AllowWriteAccess.Equals(input.AllowWriteAccess))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.SearchResultTemplate == input.SearchResultTemplate ||
                    (this.SearchResultTemplate != null &&
                    this.SearchResultTemplate.Equals(input.SearchResultTemplate))
                ) && 
                (
                    this.DetailTemplate == input.DetailTemplate ||
                    (this.DetailTemplate != null &&
                    this.DetailTemplate.Equals(input.DetailTemplate))
                ) && 
                (
                    this.DefaultOrderBy == input.DefaultOrderBy ||
                    (this.DefaultOrderBy != null &&
                    this.DefaultOrderBy.Equals(input.DefaultOrderBy))
                ) && 
                (
                    this.OrderList == input.OrderList ||
                    this.OrderList != null &&
                    input.OrderList != null 
                    //&&
                    //this.OrderList.SequenceEqual(input.OrderList)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DatasetId != null)
                    hashCode = hashCode * 59 + this.DatasetId.GetHashCode();
                if (this.OrigUrl != null)
                    hashCode = hashCode * 59 + this.OrigUrl.GetHashCode();
                if (this.SourcecodeUrl != null)
                    hashCode = hashCode * 59 + this.SourcecodeUrl.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.JsonSchema != null)
                    hashCode = hashCode * 59 + this.JsonSchema.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Betaversion != null)
                    hashCode = hashCode * 59 + this.Betaversion.GetHashCode();
                if (this.AllowWriteAccess != null)
                    hashCode = hashCode * 59 + this.AllowWriteAccess.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.SearchResultTemplate != null)
                    hashCode = hashCode * 59 + this.SearchResultTemplate.GetHashCode();
                if (this.DetailTemplate != null)
                    hashCode = hashCode * 59 + this.DetailTemplate.GetHashCode();
                if (this.DefaultOrderBy != null)
                    hashCode = hashCode * 59 + this.DefaultOrderBy.GetHashCode();
                if (this.OrderList != null)
                    hashCode = hashCode * 59 + this.OrderList.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Model
{
    /// <summary>
    /// SearchResultDTOObject
    /// </summary>
    [DataContract]
    public partial class SearchResultDTOObject :  IEquatable<SearchResultDTOObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResultDTOObject" /> class.
        /// </summary>
        /// <param name="total">total.</param>
        /// <param name="page">page.</param>
        /// <param name="results">results.</param>
        public SearchResultDTOObject(long total = default(long), int page = default(int), List<Object> results = default(List<Object>))
        {
            this.Total = total;
            this.Page = page;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="Total", EmitDefaultValue=false)]
        public long Total { get; set; }
        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="Page", EmitDefaultValue=false)]
        public int Page { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="Results", EmitDefaultValue=false)]
        public List<Object> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResultDTOObject {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResultDTOObject);
        }
        /// <summary>
        /// Returns true if SearchResultDTOObject instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResultDTOObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResultDTOObject input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Model
{
    /// <summary>
    /// SearchResultDTORegistration
    /// </summary>
    [DataContract]
    public partial class SearchResultDTORegistration :  IEquatable<SearchResultDTORegistration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResultDTORegistration" /> class.
        /// </summary>
        /// <param name="total">total.</param>
        /// <param name="page">page.</param>
        /// <param name="results">results.</param>
        public SearchResultDTORegistration(long total = default(long), int page = default(int), List<Registration> results = default(List<Registration>))
        {
            this.Total = total;
            this.Page = page;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="Total", EmitDefaultValue=false)]
        public long Total { get; set; }
        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="Page", EmitDefaultValue=false)]
        public int Page { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="Results", EmitDefaultValue=false)]
        public List<Registration> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResultDTORegistration {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResultDTORegistration);
        }
        /// <summary>
        /// Returns true if SearchResultDTORegistration instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResultDTORegistration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResultDTORegistration input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Model
{
    /// <summary>
    /// Template
    /// </summary>
    [DataContract]
    public partial class Template :  IEquatable<Template>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Template" /> class.
        /// </summary>
        /// <param name="header">header.</param>
        /// <param name="body">body.</param>
        /// <param name="footer">footer.</param>
        /// <param name="title">title.</param>
        /// <param name="properties">properties.</param>
        public Template(string header = default(string), string body = default(string), string footer = default(string), string title = default(string), List<string> properties = default(List<string>))
        {
            this.Header = header;
            this.Body = body;
            this.Footer = footer;
            this.Title = title;
            this.Properties = properties;
        }
        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }
        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public string Footer { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<string> Properties { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Template {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Template);
        }
        /// <summary>
        /// Returns true if Template instances are equal
        /// </summary>
        /// <param name="input">Instance of Template to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Template input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.CoreApi.Model
{
    /// <summary>
    /// THash
    /// </summary>
    [DataContract]
    public partial class THash :  IEquatable<THash>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="THash" /> class.
        /// </summary>
        /// <param name="algoritmus">algoritmus.</param>
        /// <param name="value">value.</param>
        public THash(string algoritmus = default(string), string value = default(string))
        {
            this.Algoritmus = algoritmus;
            this.Value = value;
        }
        /// <summary>
        /// Gets or Sets Algoritmus
        /// </summary>
        [DataMember(Name="algoritmus", EmitDefaultValue=false)]
        public string Algoritmus { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class THash {\n");
            sb.Append("  Algoritmus: ").Append(Algoritmus).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as THash);
        }
        /// <summary>
        /// Returns true if THash instances are equal
        /// </summary>
        /// <param name="input">Instance of THash to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(THash input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Algoritmus == input.Algoritmus ||
                    (this.Algoritmus != null &&
                    this.Algoritmus.Equals(input.Algoritmus))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Algoritmus != null)
                    hashCode = hashCode * 59 + this.Algoritmus.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
