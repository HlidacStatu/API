
//----------------------
// <auto-generated>
//     Generated REST API Client Code Generator v1.10.3.0 on 14.06.2024 23:12:18
//     Using the tool OpenAPI Generator v7.6.0
// </auto-generated>
//----------------------


using HlidacStatu.Api.V2.Dataset.Client;
using HlidacStatu.Api.V2.Dataset.Model;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OpenAPIDateConverter = HlidacStatu.Api.V2.Dataset.Client.OpenAPIDateConverter;
using Polly;
using RestSharp;
using RestSharp.Serializers;
using RestSharpMethod = RestSharp.Method;
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;

using System.Net.Security;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ApiV2Ping(string text, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV2PingWithHttpInfo(string text, int operationIndex = 0);
        #endregion Synchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV2PingAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV2PingWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApi : ICoreApiSync, ICoreApiAsync
    {
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoreApi : ICoreApi
    {
        private HlidacStatu.Api.V2.Dataset.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi() : this((string)null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi(string basePath)
        {
            this.Configuration = HlidacStatu.Api.V2.Dataset.Client.Configuration.MergeConfigurations(
                HlidacStatu.Api.V2.Dataset.Client.GlobalConfiguration.Instance,
                new HlidacStatu.Api.V2.Dataset.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HlidacStatu.Api.V2.Dataset.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CoreApi(HlidacStatu.Api.V2.Dataset.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Configuration = HlidacStatu.Api.V2.Dataset.Client.Configuration.MergeConfigurations(
                HlidacStatu.Api.V2.Dataset.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HlidacStatu.Api.V2.Dataset.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CoreApi(HlidacStatu.Api.V2.Dataset.Client.ISynchronousClient client, HlidacStatu.Api.V2.Dataset.Client.IAsynchronousClient asyncClient, HlidacStatu.Api.V2.Dataset.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HlidacStatu.Api.V2.Dataset.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HlidacStatu.Api.V2.Dataset.Client.IAsynchronousClient AsynchronousClient { get; set; }
        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HlidacStatu.Api.V2.Dataset.Client.ISynchronousClient Client { get; set; }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HlidacStatu.Api.V2.Dataset.Client.IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HlidacStatu.Api.V2.Dataset.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ApiV2Ping(string text, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<string> localVarResponse = ApiV2PingWithHttpInfo(text);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<string> ApiV2PingWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'text' when calling CoreApi->ApiV2Ping");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("text", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(text)); // path parameter
            localVarRequestOptions.Operation = "CoreApi.ApiV2Ping";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/v2/ping/{text}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2Ping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV2PingAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<string> localVarResponse = await ApiV2PingWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<string>> ApiV2PingWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'text' when calling CoreApi->ApiV2Ping");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("text", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(text)); // path parameter
            localVarRequestOptions.Operation = "CoreApi.ApiV2Ping";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/v2/ping/{text}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2Ping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSCreatedDTO</returns>
        DSCreatedDTO ApiV2DatasetyCreate(Registration data, int operationIndex = 0);
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSCreatedDTO</returns>
        ApiResponse<DSCreatedDTO> ApiV2DatasetyCreateWithHttpInfo(Registration data, int operationIndex = 0);
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DSItemResponseDTO&gt;</returns>
        List<DSItemResponseDTO> ApiV2DatasetyDatasetItemBulkInsert(string datasetId, Object data, int operationIndex = 0);
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DSItemResponseDTO&gt;</returns>
        ApiResponse<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo(string datasetId, Object data, int operationIndex = 0);
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool ApiV2DatasetyDatasetItemExists(string datasetId, string itemId, int operationIndex = 0);
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2DatasetyDatasetItemExistsWithHttpInfo(string datasetId, string itemId, int operationIndex = 0);
        /// <summary>
        /// Detail konkrétní poloky z datasetu
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ApiV2DatasetyDatasetItemGet(string datasetId, string itemId, int operationIndex = 0);
        /// <summary>
        /// Detail konkrétní poloky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiV2DatasetyDatasetItemGetWithHttpInfo(string datasetId, string itemId, int operationIndex = 0);
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSItemResponseDTO</returns>
        DSItemResponseDTO ApiV2DatasetyDatasetItemUpdate(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0);
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSItemResponseDTO</returns>
        ApiResponse<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateWithHttpInfo(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0);
        /// <summary>
        /// Vyhledávání v polokách datasetu
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTOObject</returns>
        SearchResultDTOObject ApiV2DatasetyDatasetSearch(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0);
        /// <summary>
        /// Vyhledávání v polokách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTOObject</returns>
        ApiResponse<SearchResultDTOObject> ApiV2DatasetyDatasetSearchWithHttpInfo(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0);
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool ApiV2DatasetyDelete(string datasetId, int operationIndex = 0);
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiV2DatasetyDeleteWithHttpInfo(string datasetId, int operationIndex = 0);
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        Registration ApiV2DatasetyDetail(string datasetId, int operationIndex = 0);
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        ApiResponse<Registration> ApiV2DatasetyDetailWithHttpInfo(string datasetId, int operationIndex = 0);
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTORegistration</returns>
        SearchResultDTORegistration ApiV2DatasetyGetAll(int operationIndex = 0);
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTORegistration</returns>
        ApiResponse<SearchResultDTORegistration> ApiV2DatasetyGetAllWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        Registration ApiV2DatasetyUpdate(Registration data, int operationIndex = 0);
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        ApiResponse<Registration> ApiV2DatasetyUpdateWithHttpInfo(Registration data, int operationIndex = 0);
        #endregion Synchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSCreatedDTO</returns>
        System.Threading.Tasks.Task<DSCreatedDTO> ApiV2DatasetyCreateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Vytvorí nový dataset
        /// </summary>
        /// <remarks>
        /// Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSCreatedDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSCreatedDTO>> ApiV2DatasetyCreateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DSItemResponseDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Hromadné vkládání záznamu
        /// </summary>
        /// <remarks>
        /// Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DSItemResponseDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DSItemResponseDTO>>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfoAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2DatasetyDatasetItemExistsAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDatasetItemExistsWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detail konkrétní poloky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiV2DatasetyDatasetItemGetAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detail konkrétní poloky z datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV2DatasetyDatasetItemGetWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSItemResponseDTO</returns>
        System.Threading.Tasks.Task<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateAsync(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSItemResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSItemResponseDTO>> ApiV2DatasetyDatasetItemUpdateWithHttpInfoAsync(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Vyhledávání v polokách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTOObject</returns>
        System.Threading.Tasks.Task<SearchResultDTOObject> ApiV2DatasetyDatasetSearchAsync(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Vyhledávání v polokách datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTOObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultDTOObject>> ApiV2DatasetyDatasetSearchWithHttpInfoAsync(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiV2DatasetyDeleteAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Smazání datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiV2DatasetyDeleteWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        System.Threading.Tasks.Task<Registration> ApiV2DatasetyDetailAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detail konkrétního datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyDetailWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTORegistration</returns>
        System.Threading.Tasks.Task<SearchResultDTORegistration> ApiV2DatasetyGetAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Nacte seznam datasetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTORegistration)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultDTORegistration>> ApiV2DatasetyGetAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        System.Threading.Tasks.Task<Registration> ApiV2DatasetyUpdateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update datasetu.
        /// </summary>
        /// <remarks>
        /// Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </remarks>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        System.Threading.Tasks.Task<ApiResponse<Registration>> ApiV2DatasetyUpdateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetyApi : IDatasetyApiSync, IDatasetyApiAsync
    {
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasetyApi : IDatasetyApi
    {
        private HlidacStatu.Api.V2.Dataset.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetyApi() : this((string)null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetyApi(string basePath)
        {
            this.Configuration = HlidacStatu.Api.V2.Dataset.Client.Configuration.MergeConfigurations(
                HlidacStatu.Api.V2.Dataset.Client.GlobalConfiguration.Instance,
                new HlidacStatu.Api.V2.Dataset.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HlidacStatu.Api.V2.Dataset.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasetyApi(HlidacStatu.Api.V2.Dataset.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Configuration = HlidacStatu.Api.V2.Dataset.Client.Configuration.MergeConfigurations(
                HlidacStatu.Api.V2.Dataset.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HlidacStatu.Api.V2.Dataset.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HlidacStatu.Api.V2.Dataset.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatasetyApi(HlidacStatu.Api.V2.Dataset.Client.ISynchronousClient client, HlidacStatu.Api.V2.Dataset.Client.IAsynchronousClient asyncClient, HlidacStatu.Api.V2.Dataset.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HlidacStatu.Api.V2.Dataset.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HlidacStatu.Api.V2.Dataset.Client.IAsynchronousClient AsynchronousClient { get; set; }
        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HlidacStatu.Api.V2.Dataset.Client.ISynchronousClient Client { get; set; }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HlidacStatu.Api.V2.Dataset.Client.IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HlidacStatu.Api.V2.Dataset.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSCreatedDTO</returns>
        public DSCreatedDTO ApiV2DatasetyCreate(Registration data, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSCreatedDTO> localVarResponse = ApiV2DatasetyCreateWithHttpInfo(data);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSCreatedDTO</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSCreatedDTO> ApiV2DatasetyCreateWithHttpInfo(Registration data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyCreate");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<DSCreatedDTO>("/api/v2/datasety", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSCreatedDTO</returns>
        public async System.Threading.Tasks.Task<DSCreatedDTO> ApiV2DatasetyCreateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSCreatedDTO> localVarResponse = await ApiV2DatasetyCreateWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Vytvorí nový dataset Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSCreatedDTO)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSCreatedDTO>> ApiV2DatasetyCreateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyCreate");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DSCreatedDTO>("/api/v2/datasety", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DSItemResponseDTO&gt;</returns>
        public List<DSItemResponseDTO> ApiV2DatasetyDatasetItemBulkInsert(string datasetId, Object data, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<List<DSItemResponseDTO>> localVarResponse = ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo(datasetId, data);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DSItemResponseDTO&gt;</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfo(string datasetId, Object data, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemBulkInsert";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DSItemResponseDTO>>("/api/v2/datasety/{datasetId}/zaznamy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemBulkInsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DSItemResponseDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DSItemResponseDTO>> ApiV2DatasetyDatasetItemBulkInsertAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<List<DSItemResponseDTO>> localVarResponse = await ApiV2DatasetyDatasetItemBulkInsertWithHttpInfoAsync(datasetId, data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Hromadné vkládání záznamu Pokud záznamy s daným ID existují, tak budou prepsány.        Ukázkový poadavek:              [       {        \&quot;HsProcessType\&quot;: \&quot;person\&quot;,        \&quot;Id\&quot;: \&quot;2\&quot;,        \&quot;jmeno\&quot;: \&quot;Ferda\&quot;,        \&quot;prijmeni\&quot;: \&quot;Mravenec\&quot;,        \&quot;narozeni\&quot;: \&quot;2018-11-13T20:20:39+00:00\&quot;       },       {        \&quot;HsProcessType\&quot;: \&quot;document\&quot;,        \&quot;Id\&quot;: \&quot;broukpytlik\&quot;,        \&quot;jmeno\&quot;: \&quot;Brouk\&quot;,        \&quot;prijmeni\&quot;: \&quot;Pytlík\&quot;,        \&quot;narozeni\&quot;: \&quot;2017-12-10T00:00:00+00:00\&quot;,        \&quot;DocumentUrl\&quot;: \&quot;www.hlidacstatu.cz\&quot;,        \&quot;DocumentPlainText\&quot;: null       }      ]
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu, kam chceme záznamy nahrát</param>
        /// <param name="data">Pole JSON objektu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DSItemResponseDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<List<DSItemResponseDTO>>> ApiV2DatasetyDatasetItemBulkInsertWithHttpInfoAsync(string datasetId, Object data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemBulkInsert");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemBulkInsert";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DSItemResponseDTO>>("/api/v2/datasety/{datasetId}/zaznamy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemBulkInsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool ApiV2DatasetyDatasetItemExists(string datasetId, string itemId, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool> localVarResponse = ApiV2DatasetyDatasetItemExistsWithHttpInfo(datasetId, itemId);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool> ApiV2DatasetyDatasetItemExistsWithHttpInfo(string datasetId, string itemId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemExists";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}/existuje", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2DatasetyDatasetItemExistsAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool> localVarResponse = await ApiV2DatasetyDatasetItemExistsWithHttpInfoAsync(datasetId, itemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Kontrola, jestli záznam existuje v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool>> ApiV2DatasetyDatasetItemExistsWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemExists");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemExists";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}/existuje", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Detail konkrétní poloky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ApiV2DatasetyDatasetItemGet(string datasetId, string itemId, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Object> localVarResponse = ApiV2DatasetyDatasetItemGetWithHttpInfo(datasetId, itemId);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétní poloky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Object> ApiV2DatasetyDatasetItemGetWithHttpInfo(string datasetId, string itemId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Detail konkrétní poloky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiV2DatasetyDatasetItemGetAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Object> localVarResponse = await ApiV2DatasetyDatasetItemGetWithHttpInfoAsync(datasetId, itemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétní poloky z datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="itemId">Id poloky v datasetu, kterou chceme nacíst</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Object>> ApiV2DatasetyDatasetItemGetWithHttpInfoAsync(string datasetId, string itemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemGet");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DSItemResponseDTO</returns>
        public DSItemResponseDTO ApiV2DatasetyDatasetItemUpdate(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSItemResponseDTO> localVarResponse = ApiV2DatasetyDatasetItemUpdateWithHttpInfo(datasetId, itemId, data, mode);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DSItemResponseDTO</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateWithHttpInfo(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Post<DSItemResponseDTO>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DSItemResponseDTO</returns>
        public async System.Threading.Tasks.Task<DSItemResponseDTO> ApiV2DatasetyDatasetItemUpdateAsync(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSItemResponseDTO> localVarResponse = await ApiV2DatasetyDatasetItemUpdateWithHttpInfoAsync(datasetId, itemId, data, mode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Vloí nebo updatuje záznam v datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu</param>
        /// <param name="itemId">Id záznamu</param>
        /// <param name="data">Objekt, který se má vloit, nebo updatovat</param>
        /// <param name="mode">\&quot;skip\&quot; (default) - pokud záznam existuje, nic se na nem nezmení.              \&quot;merge\&quot; - snaí se spojit data z obou záznamu.              \&quot;rewrite\&quot; - pokud záznam existuje, je bez milosti prepsán (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DSItemResponseDTO)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<DSItemResponseDTO>> ApiV2DatasetyDatasetItemUpdateWithHttpInfoAsync(string datasetId, string itemId, Object data, string mode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'itemId' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyDatasetItemUpdate");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(itemId)); // path parameter
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetItemUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DSItemResponseDTO>("/api/v2/datasety/{datasetId}/zaznamy/{itemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetItemUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Vyhledávání v polokách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTOObject</returns>
        public SearchResultDTOObject ApiV2DatasetyDatasetSearch(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTOObject> localVarResponse = ApiV2DatasetyDatasetSearchWithHttpInfo(datasetId, dotaz, strana, sort, desc);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Vyhledávání v polokách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTOObject</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTOObject> ApiV2DatasetyDatasetSearchWithHttpInfo(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetSearch");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            if (dotaz != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "dotaz", dotaz));
            }
            if (strana != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "strana", strana));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetSearch";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultDTOObject>("/api/v2/datasety/{datasetId}/hledat", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Vyhledávání v polokách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTOObject</returns>
        public async System.Threading.Tasks.Task<SearchResultDTOObject> ApiV2DatasetyDatasetSearchAsync(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTOObject> localVarResponse = await ApiV2DatasetyDatasetSearchWithHttpInfoAsync(datasetId, dotaz, strana, sort, desc, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Vyhledávání v polokách datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="dotaz">Hledaný výraz (optional)</param>
        /// <param name="strana">Stránkování (optional)</param>
        /// <param name="sort">Název pole pro razení (optional)</param>
        /// <param name="desc">Razení: 0 - Vzestupne; 1 - Sestupne (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTOObject)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTOObject>> ApiV2DatasetyDatasetSearchWithHttpInfoAsync(string datasetId, string dotaz = default(string), int? strana = default(int?), string sort = default(string), string desc = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDatasetSearch");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            if (dotaz != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "dotaz", dotaz));
            }
            if (strana != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "strana", strana));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDatasetSearch";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultDTOObject>("/api/v2/datasety/{datasetId}/hledat", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDatasetSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool ApiV2DatasetyDelete(string datasetId, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool> localVarResponse = ApiV2DatasetyDeleteWithHttpInfo(datasetId);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool> ApiV2DatasetyDeleteWithHttpInfo(string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDelete");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDelete";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Delete<bool>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiV2DatasetyDeleteAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool> localVarResponse = await ApiV2DatasetyDeleteWithHttpInfoAsync(datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Smazání datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<bool>> ApiV2DatasetyDeleteWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDelete");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDelete";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<bool>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        public Registration ApiV2DatasetyDetail(string datasetId, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration> localVarResponse = ApiV2DatasetyDetailWithHttpInfo(datasetId);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration> ApiV2DatasetyDetailWithHttpInfo(string datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDetail");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDetail";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<Registration>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        public async System.Threading.Tasks.Task<Registration> ApiV2DatasetyDetailAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration> localVarResponse = await ApiV2DatasetyDetailWithHttpInfoAsync(datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Detail konkrétního datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasetId">Id datasetu (mueme ho získat ze seznamu datasetu)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration>> ApiV2DatasetyDetailWithHttpInfoAsync(string datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datasetId' is set
            if (datasetId == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'datasetId' when calling DatasetyApi->ApiV2DatasetyDetail");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.PathParameters.Add("datasetId", HlidacStatu.Api.V2.Dataset.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyDetail";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Registration>("/api/v2/datasety/{datasetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyDetail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResultDTORegistration</returns>
        public SearchResultDTORegistration ApiV2DatasetyGetAll(int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTORegistration> localVarResponse = ApiV2DatasetyGetAllWithHttpInfo();
            return localVarResponse.Data;
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResultDTORegistration</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTORegistration> ApiV2DatasetyGetAllWithHttpInfo(int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchResultDTORegistration>("/api/v2/datasety", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResultDTORegistration</returns>
        public async System.Threading.Tasks.Task<SearchResultDTORegistration> ApiV2DatasetyGetAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTORegistration> localVarResponse = await ApiV2DatasetyGetAllWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Nacte seznam datasetu 
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResultDTORegistration)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<SearchResultDTORegistration>> ApiV2DatasetyGetAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyGetAll";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchResultDTORegistration>("/api/v2/datasety", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Update datasetu. Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Registration</returns>
        public Registration ApiV2DatasetyUpdate(Registration data, int operationIndex = 0)
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration> localVarResponse = ApiV2DatasetyUpdateWithHttpInfo(data);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Update datasetu. Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Registration</returns>
        public HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration> ApiV2DatasetyUpdateWithHttpInfo(Registration data, int operationIndex = 0)
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyUpdate");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = this.Client.Put<Registration>("/api/v2/datasety", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
        /// <summary>
        /// Update datasetu. Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Registration</returns>
        public async System.Threading.Tasks.Task<Registration> ApiV2DatasetyUpdateAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration> localVarResponse = await ApiV2DatasetyUpdateWithHttpInfoAsync(data, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Update datasetu. Není moné zmenit hodnoty jsonSchema a datasetId. Pokud je potrebuje zmenit,   musí datovou sadu smazat a zaregistrovat znovu.    Ukázkový poadavek:  https://raw.githubusercontent.com/HlidacStatu/API/master/v2/create_dataset.example.json
        /// </summary>
        /// <exception cref="HlidacStatu.Api.V2.Dataset.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Objekt typu Registration</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Registration)</returns>
        public async System.Threading.Tasks.Task<HlidacStatu.Api.V2.Dataset.Client.ApiResponse<Registration>> ApiV2DatasetyUpdateWithHttpInfoAsync(Registration data, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
            {
                throw new HlidacStatu.Api.V2.Dataset.Client.ApiException(400, "Missing required parameter 'data' when calling DatasetyApi->ApiV2DatasetyUpdate");
            }
            HlidacStatu.Api.V2.Dataset.Client.RequestOptions localVarRequestOptions = new HlidacStatu.Api.V2.Dataset.Client.RequestOptions();
            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            var localVarContentType = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }
            var localVarAccept = HlidacStatu.Api.V2.Dataset.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            localVarRequestOptions.Data = data;
            localVarRequestOptions.Operation = "DatasetyApi.ApiV2DatasetyUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;
            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Registration>("/api/v2/datasety", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2DatasetyUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
    /// </summary>
    internal class CustomJsonCodec : IRestSerializer, ISerializer, IDeserializer
    {
        private readonly IReadableConfiguration _configuration;
        private readonly JsonSerializerSettings _serializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        public CustomJsonCodec(IReadableConfiguration configuration)
        {
            _configuration = configuration;
        }
        public CustomJsonCodec(JsonSerializerSettings serializerSettings, IReadableConfiguration configuration)
        {
            _serializerSettings = serializerSettings;
            _configuration = configuration;
        }
        /// <summary>
        /// Serialize the object into a JSON string.
        /// </summary>
        /// <param name="obj">Object to be serialized.</param>
        /// <returns>A JSON string.</returns>
        public string Serialize(object obj)
        {
            if (obj != null && obj is HlidacStatu.Api.V2.Dataset.Model.AbstractOpenAPISchema)
            {
                // the object to be serialized is an oneOf/anyOf schema
                return ((HlidacStatu.Api.V2.Dataset.Model.AbstractOpenAPISchema)obj).ToJson();
            }
            else
            {
                return JsonConvert.SerializeObject(obj, _serializerSettings);
            }
        }
        public string Serialize(Parameter bodyParameter) => Serialize(bodyParameter.Value);
        public T Deserialize<T>(RestResponse response)
        {
            var result = (T)Deserialize(response, typeof(T));
            return result;
        }
        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        internal object Deserialize(RestResponse response, Type type)
        {
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }
            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                var bytes = response.RawBytes;
                if (response.Headers != null)
                {
                    var filePath = string.IsNullOrEmpty(_configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : _configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in response.Headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + ClientUtils.SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, bytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(bytes);
                return stream;
            }
            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content, null, System.Globalization.DateTimeStyles.RoundtripKind);
            }
            if (type == typeof(string) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return Convert.ChangeType(response.Content, type);
            }
            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, _serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        public ISerializer Serializer => this;
        public IDeserializer Deserializer => this;
        public string[] AcceptedContentTypes => RestSharp.ContentType.JsonAccept;
        public SupportsContentType SupportsContentType => contentType =>
            contentType.Value.EndsWith("json", StringComparison.InvariantCultureIgnoreCase) ||
            contentType.Value.EndsWith("javascript", StringComparison.InvariantCultureIgnoreCase);
        public ContentType ContentType { get; set; } = RestSharp.ContentType.Json;
        public DataFormat DataFormat => DataFormat.Json;
    }
    /// <summary>
    /// Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
    /// encapsulating general REST accessor use cases.
    /// </summary>
    public partial class ApiClient : ISynchronousClient, IAsynchronousClient
    {
        private readonly string _baseUrl;
        /// <summary>
        /// Specifies the settings on a <see cref="JsonSerializer" /> object.
        /// These settings can be adjusted to accommodate custom serialization rules.
        /// </summary>
        public JsonSerializerSettings SerializerSettings { get; set; } = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(RestRequest request);
        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(RestRequest request, RestResponse response);
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />, defaulting to the global configurations' base url.
        /// </summary>
        public ApiClient()
        {
            _baseUrl = HlidacStatu.Api.V2.Dataset.Client.GlobalConfiguration.Instance.BasePath;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" />
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        public ApiClient(string basePath)
        {
            if (string.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");
            _baseUrl = basePath;
        }
        /// <summary>
        /// Constructs the RestSharp version of an http method
        /// </summary>
        /// <param name="method">Swagger Client Custom HttpMethod</param>
        /// <returns>RestSharp's HttpMethod instance.</returns>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        private RestSharpMethod Method(HttpMethod method)
        {
            RestSharpMethod other;
            switch (method)
            {
                case HttpMethod.Get:
                    other = RestSharpMethod.Get;
                    break;
                case HttpMethod.Post:
                    other = RestSharpMethod.Post;
                    break;
                case HttpMethod.Put:
                    other = RestSharpMethod.Put;
                    break;
                case HttpMethod.Delete:
                    other = RestSharpMethod.Delete;
                    break;
                case HttpMethod.Head:
                    other = RestSharpMethod.Head;
                    break;
                case HttpMethod.Options:
                    other = RestSharpMethod.Options;
                    break;
                case HttpMethod.Patch:
                    other = RestSharpMethod.Patch;
                    break;
                default:
                    throw new ArgumentOutOfRangeException("method", method, null);
            }
            return other;
        }
        /// <summary>
        /// Provides all logic for constructing a new RestSharp <see cref="RestRequest"/>.
        /// At this point, all information for querying the service is known. Here, it is simply
        /// mapped into the RestSharp request.
        /// </summary>
        /// <param name="method">The http verb.</param>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>[private] A new RestRequest instance.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        private RestRequest NewRequest(
            HttpMethod method,
            string path,
            RequestOptions options,
            IReadableConfiguration configuration)
        {
            if (path == null) throw new ArgumentNullException("path");
            if (options == null) throw new ArgumentNullException("options");
            if (configuration == null) throw new ArgumentNullException("configuration");
            RestRequest request = new RestRequest(path, Method(method));
            if (options.PathParameters != null)
            {
                foreach (var pathParam in options.PathParameters)
                {
                    request.AddParameter(pathParam.Key, pathParam.Value, ParameterType.UrlSegment);
                }
            }
            if (options.QueryParameters != null)
            {
                foreach (var queryParam in options.QueryParameters)
                {
                    foreach (var value in queryParam.Value)
                    {
                        request.AddQueryParameter(queryParam.Key, value);
                    }
                }
            }
            if (configuration.DefaultHeaders != null)
            {
                foreach (var headerParam in configuration.DefaultHeaders)
                {
                    request.AddHeader(headerParam.Key, headerParam.Value);
                }
            }
            if (options.HeaderParameters != null)
            {
                foreach (var headerParam in options.HeaderParameters)
                {
                    foreach (var value in headerParam.Value)
                    {
                        request.AddHeader(headerParam.Key, value);
                    }
                }
            }
            if (options.FormParameters != null)
            {
                foreach (var formParam in options.FormParameters)
                {
                    request.AddParameter(formParam.Key, formParam.Value);
                }
            }
            if (options.Data != null)
            {
                if (options.Data is Stream stream)
                {
                    var contentType = "application/octet-stream";
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        contentType = contentTypes[0];
                    }
                    var bytes = ClientUtils.ReadAsBytes(stream);
                    request.AddParameter(contentType, bytes, ParameterType.RequestBody);
                }
                else
                {
                    if (options.HeaderParameters != null)
                    {
                        var contentTypes = options.HeaderParameters["Content-Type"];
                        if (contentTypes == null || contentTypes.Any(header => header.Contains("application/json")))
                        {
                            request.RequestFormat = DataFormat.Json;
                        }
                        else
                        {
                            // TODO: Generated client user should add additional handlers. RestSharp only supports XML and JSON, with XML as default.
                        }
                    }
                    else
                    {
                        // Here, we'll assume JSON APIs are more common. XML can be forced by adding produces/consumes to openapi spec explicitly.
                        request.RequestFormat = DataFormat.Json;
                    }
                    request.AddJsonBody(options.Data);
                }
            }
            if (options.FileParameters != null)
            {
                foreach (var fileParam in options.FileParameters)
                {
                    foreach (var file in fileParam.Value)
                    {
                        var bytes = ClientUtils.ReadAsBytes(file);
                        var fileStream = file as FileStream;
                        if (fileStream != null)
                            request.AddFile(fileParam.Key, bytes, System.IO.Path.GetFileName(fileStream.Name));
                        else
                            request.AddFile(fileParam.Key, bytes, "no_file_name_provided");
                    }
                }
            }
            return request;
        }
        private ApiResponse<T> ToApiResponse<T>(RestResponse<T> response)
        {
            T result = response.Data;
            string rawContent = response.Content;
            var transformed = new ApiResponse<T>(response.StatusCode, new Multimap<string, string>(), result, rawContent)
            {
                ErrorText = response.ErrorMessage,
                Cookies = new List<Cookie>()
            };
            if (response.Headers != null)
            {
                foreach (var responseHeader in response.Headers)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }
            if (response.ContentHeaders != null)
            {
                foreach (var responseHeader in response.ContentHeaders)
                {
                    transformed.Headers.Add(responseHeader.Name, ClientUtils.ParameterToString(responseHeader.Value));
                }
            }
            if (response.Cookies != null)
            {
                foreach (var responseCookies in response.Cookies.Cast<Cookie>())
                {
                    transformed.Cookies.Add(
                        new Cookie(
                            responseCookies.Name,
                            responseCookies.Value,
                            responseCookies.Path,
                            responseCookies.Domain)
                        );
                }
            }
            return transformed;
        }
        private ApiResponse<T> Exec<T>(RestRequest request, RequestOptions options, IReadableConfiguration configuration)
        {
            var baseUrl = configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;
            var cookies = new CookieContainer();
            if (options.Cookies != null && options.Cookies.Count > 0)
            {
                foreach (var cookie in options.Cookies)
                {
                    cookies.Add(new Cookie(cookie.Name, cookie.Value));
                }
            }
            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                CookieContainer = cookies,
                Timeout = TimeSpan.FromMilliseconds( configuration.Timeout),
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent,
                UseDefaultCredentials = configuration.UseDefaultCredentials,
                RemoteCertificateValidationCallback = configuration.RemoteCertificateValidationCallback
            };
            using (RestClient client = new RestClient(clientOptions,
                configureSerialization: serializerConfig => serializerConfig.UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration))))
            {
                InterceptRequest(request);
                RestResponse<T> response;
                if (RetryConfiguration.RetryPolicy != null)
                {
                    var policy = RetryConfiguration.RetryPolicy;
                    var policyResult = policy.ExecuteAndCapture(() => client.Execute(request));
                    response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result, CancellationToken.None).Result : new RestResponse<T>(request)
                    {
                        ErrorException = policyResult.FinalException
                    };
                }
                else
                {
                    response = client.Execute<T>(request);
                }
                // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
                if (typeof(HlidacStatu.Api.V2.Dataset.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
                {
                    try
                    {
                        response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                    }
                    catch (Exception ex)
                    {
                        throw ex.InnerException != null ? ex.InnerException : ex;
                    }
                }
                else if (typeof(T).Name == "Stream") // for binary response
                {
                    response.Data = (T)(object)new MemoryStream(response.RawBytes);
                }
                else if (typeof(T).Name == "Byte[]") // for byte response
                {
                    response.Data = (T)(object)response.RawBytes;
                }
                else if (typeof(T).Name == "String") // for string response
                {
                    response.Data = (T)(object)response.Content;
                }
                InterceptResponse(request, response);
                var result = ToApiResponse(response);
                if (response.ErrorMessage != null)
                {
                    result.ErrorText = response.ErrorMessage;
                }
                if (response.Cookies != null && response.Cookies.Count > 0)
                {
                    if (result.Cookies == null) result.Cookies = new List<Cookie>();
                    foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                    {
                        var cookie = new Cookie(
                            restResponseCookie.Name,
                            restResponseCookie.Value,
                            restResponseCookie.Path,
                            restResponseCookie.Domain
                        )
                        {
                            Comment = restResponseCookie.Comment,
                            CommentUri = restResponseCookie.CommentUri,
                            Discard = restResponseCookie.Discard,
                            Expired = restResponseCookie.Expired,
                            Expires = restResponseCookie.Expires,
                            HttpOnly = restResponseCookie.HttpOnly,
                            Port = restResponseCookie.Port,
                            Secure = restResponseCookie.Secure,
                            Version = restResponseCookie.Version
                        };
                        result.Cookies.Add(cookie);
                    }
                }
                return result;
            }
        }
        private async Task<ApiResponse<T>> ExecAsync<T>(RestRequest request, RequestOptions options, IReadableConfiguration configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var baseUrl = configuration.GetOperationServerUrl(options.Operation, options.OperationIndex) ?? _baseUrl;
            var clientOptions = new RestClientOptions(baseUrl)
            {
                ClientCertificates = configuration.ClientCertificates,
                Timeout = TimeSpan.FromMilliseconds( configuration.Timeout),
                Proxy = configuration.Proxy,
                UserAgent = configuration.UserAgent,
                UseDefaultCredentials = configuration.UseDefaultCredentials,
                RemoteCertificateValidationCallback = configuration.RemoteCertificateValidationCallback
            };
            using (RestClient client = new RestClient(clientOptions,
                configureSerialization: serializerConfig => serializerConfig.UseSerializer(() => new CustomJsonCodec(SerializerSettings, configuration))))
            {
                InterceptRequest(request);
                RestResponse<T> response;
                if (RetryConfiguration.AsyncRetryPolicy != null)
                {
                    var policy = RetryConfiguration.AsyncRetryPolicy;
                    var policyResult = await policy.ExecuteAndCaptureAsync((ct) => client.ExecuteAsync(request, ct), cancellationToken).ConfigureAwait(false);
                    response = (policyResult.Outcome == OutcomeType.Successful) ? client.Deserialize<T>(policyResult.Result, CancellationToken.None).Result : new RestResponse<T>(request)
                    {
                        ErrorException = policyResult.FinalException
                    };
                }
                else
                {
                    response = await client.ExecuteAsync<T>(request, cancellationToken).ConfigureAwait(false);
                }
                // if the response type is oneOf/anyOf, call FromJSON to deserialize the data
                if (typeof(HlidacStatu.Api.V2.Dataset.Model.AbstractOpenAPISchema).IsAssignableFrom(typeof(T)))
                {
                    response.Data = (T) typeof(T).GetMethod("FromJson").Invoke(null, new object[] { response.Content });
                }
                else if (typeof(T).Name == "Stream") // for binary response
                {
                    response.Data = (T)(object)new MemoryStream(response.RawBytes);
                }
                else if (typeof(T).Name == "Byte[]") // for byte response
                {
                    response.Data = (T)(object)response.RawBytes;
                }
                InterceptResponse(request, response);
                var result = ToApiResponse(response);
                if (response.ErrorMessage != null)
                {
                    result.ErrorText = response.ErrorMessage;
                }
                if (response.Cookies != null && response.Cookies.Count > 0)
                {
                    if (result.Cookies == null) result.Cookies = new List<Cookie>();
                    foreach (var restResponseCookie in response.Cookies.Cast<Cookie>())
                    {
                        var cookie = new Cookie(
                            restResponseCookie.Name,
                            restResponseCookie.Value,
                            restResponseCookie.Path,
                            restResponseCookie.Domain
                        )
                        {
                            Comment = restResponseCookie.Comment,
                            CommentUri = restResponseCookie.CommentUri,
                            Discard = restResponseCookie.Discard,
                            Expired = restResponseCookie.Expired,
                            Expires = restResponseCookie.Expires,
                            HttpOnly = restResponseCookie.HttpOnly,
                            Port = restResponseCookie.Port,
                            Secure = restResponseCookie.Secure,
                            Version = restResponseCookie.Version
                        };
                        result.Cookies.Add(cookie);
                    }
                }
                return result;
            }
        }
        #region IAsynchronousClient
        /// <summary>
        /// Make a HTTP GET request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> GetAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Get, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP POST request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PostAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Post, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP PUT request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PutAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Put, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP DELETE request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> DeleteAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP HEAD request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> HeadAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Head, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP OPTION request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> OptionsAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Options, path, options, config), options, config, cancellationToken);
        }
        /// <summary>
        /// Make a HTTP PATCH request (async).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <param name="cancellationToken">Token that enables callers to cancel the request.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public Task<ApiResponse<T>> PatchAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return ExecAsync<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config, cancellationToken);
        }
        #endregion IAsynchronousClient
        #region ISynchronousClient
        /// <summary>
        /// Make a HTTP GET request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Get<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Get, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP POST request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Post<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Post, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP PUT request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Put<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Put, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP DELETE request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Delete<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Delete, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP HEAD request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Head<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Head, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP OPTION request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Options<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Options, path, options, config), options, config);
        }
        /// <summary>
        /// Make a HTTP PATCH request (synchronous).
        /// </summary>
        /// <param name="path">The target path (or resource).</param>
        /// <param name="options">The additional request options.</param>
        /// <param name="configuration">A per-request configuration object. It is assumed that any merge with
        /// GlobalConfiguration has been done before calling this method.</param>
        /// <returns>A Task containing ApiResponse</returns>
        public ApiResponse<T> Patch<T>(string path, RequestOptions options, IReadableConfiguration configuration = null)
        {
            var config = configuration ?? GlobalConfiguration.Instance;
            return Exec<T>(NewRequest(HttpMethod.Patch, path, options, config), options, config);
        }
        #endregion ISynchronousClient
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    public class ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int ErrorCode { get; set; }
        /// <summary>
        /// Gets or sets the error content (body json object)
        /// </summary>
        /// <value>The error content (Http response body).</value>
        public object ErrorContent { get; private set; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public Multimap<string, string> Headers { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        public ApiException() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public ApiException(int errorCode, string message) : base(message)
        {
            this.ErrorCode = errorCode;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        /// <param name="headers">HTTP Headers.</param>
        public ApiException(int errorCode, string message, object errorContent = null, Multimap<string, string> headers = null) : base(message)
        {
            this.ErrorCode = errorCode;
            this.ErrorContent = errorContent;
            this.Headers = headers;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Provides a non-generic contract for the ApiResponse wrapper.
    /// </summary>
    public interface IApiResponse
    {
        /// <summary>
        /// The data type of <see cref="Content"/>
        /// </summary>
        Type ResponseType { get; }
        /// <summary>
        /// The content of this response
        /// </summary>
        Object Content { get; }
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        HttpStatusCode StatusCode { get; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        Multimap<string, string> Headers { get; }
        /// <summary>
        /// Gets or sets any error text defined by the calling client.
        /// </summary>
        string ErrorText { get; set; }
        /// <summary>
        /// Gets or sets any cookies passed along on the response.
        /// </summary>
        List<Cookie> Cookies { get; set; }
        /// <summary>
        /// The raw content of this response
        /// </summary>
        string RawContent { get; }
    }
    /// <summary>
    /// API Response
    /// </summary>
    public class ApiResponse<T> : IApiResponse
    {
        #region Properties
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public HttpStatusCode StatusCode { get; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public Multimap<string, string> Headers { get; }
        /// <summary>
        /// Gets or sets the data (parsed HTTP body)
        /// </summary>
        /// <value>The data.</value>
        public T Data { get; }
        /// <summary>
        /// Gets or sets any error text defined by the calling client.
        /// </summary>
        public string ErrorText { get; set; }
        /// <summary>
        /// Gets or sets any cookies passed along on the response.
        /// </summary>
        public List<Cookie> Cookies { get; set; }
        /// <summary>
        /// The content of this response
        /// </summary>
        public Type ResponseType
        {
            get { return typeof(T); }
        }
        /// <summary>
        /// The data type of <see cref="Content"/>
        /// </summary>
        public object Content
        {
            get { return Data; }
        }
        /// <summary>
        /// The raw content
        /// </summary>
        public string RawContent { get; }
        #endregion Properties
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        /// <param name="rawContent">Raw content.</param>
        public ApiResponse(HttpStatusCode statusCode, Multimap<string, string> headers, T data, string rawContent)
        {
            StatusCode = statusCode;
            Headers = headers;
            Data = data;
            RawContent = rawContent;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(HttpStatusCode statusCode, Multimap<string, string> headers, T data) : this(statusCode, headers, data, null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        /// <param name="rawContent">Raw content.</param>
        public ApiResponse(HttpStatusCode statusCode, T data, string rawContent) : this(statusCode, null, data, rawContent)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(HttpStatusCode statusCode, T data) : this(statusCode, data, null)
        {
        }
        #endregion Constructors
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static class ClientUtils
    {
        /// <summary>
        /// Sanitize filename by removing the path
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Filename</returns>
        public static string SanitizeFilename(string filename)
        {
            Match match = Regex.Match(filename, @".*[/\\](.*)$");
            return match.Success ? match.Groups[1].Value : filename;
        }
        /// <summary>
        /// Convert params to key/value pairs.
        /// Use collectionFormat to properly format lists and collections.
        /// </summary>
        /// <param name="collectionFormat">The swagger-supported collection format, one of: csv, tsv, ssv, pipes, multi</param>
        /// <param name="name">Key name.</param>
        /// <param name="value">Value object.</param>
        /// <returns>A multimap of keys with 1..n associated values.</returns>
        public static Multimap<string, string> ParameterToMultiMap(string collectionFormat, string name, object value)
        {
            var parameters = new Multimap<string, string>();
            if (value is ICollection collection && collectionFormat == "multi")
            {
                foreach (var item in collection)
                {
                    parameters.Add(name, ParameterToString(item));
                }
            }
            else if (value is IDictionary dictionary)
            {
                if(collectionFormat == "deepObject") {
                    foreach (DictionaryEntry entry in dictionary)
                    {
                        parameters.Add(name + "[" + entry.Key + "]", ParameterToString(entry.Value));
                    }
                }
                else {
                    foreach (DictionaryEntry entry in dictionary)
                    {
                        parameters.Add(entry.Key.ToString(), ParameterToString(entry.Value));
                    }
                }
            }
            else
            {
                parameters.Add(name, ParameterToString(value));
            }
            return parameters;
        }
        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="configuration">An optional configuration instance, providing formatting options used in processing.</param>
        /// <returns>Formatted string.</returns>
        public static string ParameterToString(object obj, IReadableConfiguration configuration = null)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString((configuration ?? GlobalConfiguration.Instance).DateTimeFormat);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString((configuration ?? GlobalConfiguration.Instance).DateTimeFormat);
            if (obj is bool boolean)
                return boolean ? "true" : "false";
            if (obj is ICollection collection) {
                List<string> entries = new List<string>();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry, configuration));
                return string.Join(",", entries);
            }
            if (obj is Enum && HasEnumMemberAttrValue(obj))
                return GetEnumMemberAttrValue(obj);
            return Convert.ToString(obj, CultureInfo.InvariantCulture);
        }
        /// <summary>
        /// Serializes the given object when not null. Otherwise return null.
        /// </summary>
        /// <param name="obj">The object to serialize.</param>
        /// <returns>Serialized string.</returns>
        public static string Serialize(object obj)
        {
            return obj != null ? Newtonsoft.Json.JsonConvert.SerializeObject(obj) : null;
        }
        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
        }
        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }
        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;
            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }
            return contentTypes[0]; // use the first content type specified in 'consumes'
        }
        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;
            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";
            return string.Join(",", accepts);
        }
        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        public static readonly Regex JsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;
            return JsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json");
        }
        /// <summary>
        /// Is the Enum decorated with EnumMember Attribute
        /// </summary>
        /// <param name="enumVal"></param>
        /// <returns>true if found</returns>
        private static bool HasEnumMemberAttrValue(object enumVal)
        {
            if (enumVal == null)
                throw new ArgumentNullException(nameof(enumVal));
            var enumType = enumVal.GetType();
            var memInfo = enumType.GetMember(enumVal.ToString() ?? throw new InvalidOperationException());
            var attr = memInfo.FirstOrDefault()?.GetCustomAttributes(false).OfType<EnumMemberAttribute>().FirstOrDefault();
            if (attr != null) return true;
                return false;
        }
        /// <summary>
        /// Get the EnumMember value
        /// </summary>
        /// <param name="enumVal"></param>
        /// <returns>EnumMember value as string otherwise null</returns>
        private static string GetEnumMemberAttrValue(object enumVal)
        {
            if (enumVal == null)
                throw new ArgumentNullException(nameof(enumVal));
            var enumType = enumVal.GetType();
            var memInfo = enumType.GetMember(enumVal.ToString() ?? throw new InvalidOperationException());
            var attr = memInfo.FirstOrDefault()?.GetCustomAttributes(false).OfType<EnumMemberAttribute>().FirstOrDefault();
            if (attr != null)
            {
                return attr.Value;
            }
            return null;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Represents a set of configuration settings
    /// </summary>
    public class Configuration : IReadableConfiguration
    {
        #region Constants
        /// <summary>
        /// Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "1.0.0";
        /// <summary>
        /// Identifier for ISO 8601 DateTime Format
        /// </summary>
        /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        // ReSharper disable once InconsistentNaming
        public const string ISO8601_DATETIME_FORMAT = "o";
        #endregion Constants
        #region Static Members
        /// <summary>
        /// Default creation of exceptions for a given method name and response object
        /// </summary>
        public static readonly ExceptionFactory DefaultExceptionFactory = (methodName, response) =>
        {
            var status = (int)response.StatusCode;
            if (status >= 400)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.RawContent),
                    response.RawContent, response.Headers);
            }
            return null;
        };
        #endregion Static Members
        #region Private Members
        /// <summary>
        /// Defines the base path of the target API server.
        /// Example: http://localhost:3000/v1/
        /// </summary>
        private string _basePath;
        private bool _useDefaultCredentials = false;
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// This is the key and value comprising the "secret" for accessing an API.
        /// </summary>
        /// <value>The API key.</value>
        private IDictionary<string, string> _apiKey;
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        private IDictionary<string, string> _apiKeyPrefix;
        private string _dateTimeFormat = ISO8601_DATETIME_FORMAT;
        private string _tempFolderPath = Path.GetTempPath();
        /// <summary>
        /// Gets or sets the servers defined in the OpenAPI spec.
        /// </summary>
        /// <value>The servers</value>
        private IList<IReadOnlyDictionary<string, object>> _servers;
        /// <summary>
        /// Gets or sets the operation servers defined in the OpenAPI spec.
        /// </summary>
        /// <value>The operation servers</value>
        private IReadOnlyDictionary<string, List<IReadOnlyDictionary<string, object>>> _operationServers;
        #endregion Private Members
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("ReSharper", "VirtualMemberCallInConstructor")]
        public Configuration()
        {
            Proxy = null;
            UserAgent = WebUtility.UrlEncode("OpenAPI-Generator/1.0.0/csharp");
            BasePath = "https://api.hlidacstatu.cz";
            DefaultHeaders = new ConcurrentDictionary<string, string>();
            ApiKey = new ConcurrentDictionary<string, string>();
            ApiKeyPrefix = new ConcurrentDictionary<string, string>();
            Servers = new List<IReadOnlyDictionary<string, object>>()
            {
                {
                    new Dictionary<string, object> {
                        {"url", "https://api.hlidacstatu.cz"},
                        {"description", "No description provided"},
                    }
                }
            };
            OperationServers = new Dictionary<string, List<IReadOnlyDictionary<string, object>>>()
            {
            };
            // Setting Timeout has side effects (forces ApiClient creation).
            Timeout = 100000;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("ReSharper", "VirtualMemberCallInConstructor")]
        public Configuration(
            IDictionary<string, string> defaultHeaders,
            IDictionary<string, string> apiKey,
            IDictionary<string, string> apiKeyPrefix,
            string basePath = "https://api.hlidacstatu.cz") : this()
        {
            if (string.IsNullOrWhiteSpace(basePath))
                throw new ArgumentException("The provided basePath is invalid.", "basePath");
            if (defaultHeaders == null)
                throw new ArgumentNullException("defaultHeaders");
            if (apiKey == null)
                throw new ArgumentNullException("apiKey");
            if (apiKeyPrefix == null)
                throw new ArgumentNullException("apiKeyPrefix");
            BasePath = basePath;
            foreach (var keyValuePair in defaultHeaders)
            {
                DefaultHeaders.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKey)
            {
                ApiKey.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKeyPrefix)
            {
                ApiKeyPrefix.Add(keyValuePair);
            }
        }
        #endregion Constructors
        #region Properties
        /// <summary>
        /// Gets or sets the base path for API access.
        /// </summary>
        public virtual string BasePath 
        {
            get { return _basePath; }
            set { _basePath = value; }
        }
        /// <summary>
        /// Determine whether or not the "default credentials" (e.g. the user account under which the current process is running) will be sent along to the server. The default is false.
        /// </summary>
        public virtual bool UseDefaultCredentials
        {
            get { return _useDefaultCredentials; }
            set { _useDefaultCredentials = value; }
        }
        /// <summary>
        /// Gets or sets the default header.
        /// </summary>
        [Obsolete("Use DefaultHeaders instead.")]
        public virtual IDictionary<string, string> DefaultHeader
        {
            get
            {
                return DefaultHeaders;
            }
            set
            {
                DefaultHeaders = value;
            }
        }
        /// <summary>
        /// Gets or sets the default headers.
        /// </summary>
        public virtual IDictionary<string, string> DefaultHeaders { get; set; }
        /// <summary>
        /// Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
        /// </summary>
        public virtual int Timeout { get; set; }
        /// <summary>
        /// Gets or sets the proxy
        /// </summary>
        /// <value>Proxy.</value>
        public virtual WebProxy Proxy { get; set; }
        /// <summary>
        /// Gets or sets the HTTP user agent.
        /// </summary>
        /// <value>Http user agent.</value>
        public virtual string UserAgent { get; set; }
        /// <summary>
        /// Gets or sets the username (HTTP basic authentication).
        /// </summary>
        /// <value>The username.</value>
        public virtual string Username { get; set; }
        /// <summary>
        /// Gets or sets the password (HTTP basic authentication).
        /// </summary>
        /// <value>The password.</value>
        public virtual string Password { get; set; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        public string GetApiKeyWithPrefix(string apiKeyIdentifier)
        {
            string apiKeyValue;
            ApiKey.TryGetValue(apiKeyIdentifier, out apiKeyValue);
            string apiKeyPrefix;
            if (ApiKeyPrefix.TryGetValue(apiKeyIdentifier, out apiKeyPrefix))
            {
                return apiKeyPrefix + " " + apiKeyValue;
            }
            return apiKeyValue;
        }
        /// <summary>
        /// Gets or sets certificate collection to be sent with requests.
        /// </summary>
        /// <value>X509 Certificate collection.</value>
        public X509CertificateCollection ClientCertificates { get; set; }
        /// <summary>
        /// Gets or sets the access token for OAuth2 authentication.
        ///
        /// This helper property simplifies code generation.
        /// </summary>
        /// <value>The access token.</value>
        public virtual string AccessToken { get; set; }
        /// <summary>
        /// Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public virtual string TempFolderPath
        {
            get { return _tempFolderPath; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    _tempFolderPath = Path.GetTempPath();
                    return;
                }
                // create the directory if it does not exist
                if (!Directory.Exists(value))
                {
                    Directory.CreateDirectory(value);
                }
                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                {
                    _tempFolderPath = value;
                }
                else
                {
                    _tempFolderPath = value + Path.DirectorySeparatorChar;
                }
            }
        }
        /// <summary>
        /// Gets or sets the date time format used when serializing in the ApiClient
        /// By default, it's set to ISO 8601 - "o", for others see:
        /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
        /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
        /// No validation is done to ensure that the string you're providing is valid
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public virtual string DateTimeFormat
        {
            get { return _dateTimeFormat; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Never allow a blank or null string, go back to the default
                    _dateTimeFormat = ISO8601_DATETIME_FORMAT;
                    return;
                }
                // Caution, no validation when you choose date time format other than ISO 8601
                // Take a look at the above links
                _dateTimeFormat = value;
            }
        }
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        ///
        /// Whatever you set here will be prepended to the value defined in AddApiKey.
        ///
        /// An example invocation here might be:
        /// <example>
        /// ApiKeyPrefix["Authorization"] = "Bearer";
        /// </example>
        ///  where ApiKey["Authorization"] would then be used to set the value of your bearer token.
        ///
        /// <remarks>
        /// OAuth2 workflows should set tokens via AccessToken.
        /// </remarks>
        /// </summary>
        /// <value>The prefix of the API key.</value>
        public virtual IDictionary<string, string> ApiKeyPrefix
        {
            get { return _apiKeyPrefix; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKeyPrefix collection may not be null.");
                }
                _apiKeyPrefix = value;
            }
        }
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        public virtual IDictionary<string, string> ApiKey
        {
            get { return _apiKey; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKey collection may not be null.");
                }
                _apiKey = value;
            }
        }
        /// <summary>
        /// Gets or sets the servers.
        /// </summary>
        /// <value>The servers.</value>
        public virtual IList<IReadOnlyDictionary<string, object>> Servers
        {
            get { return _servers; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Servers may not be null.");
                }
                _servers = value;
            }
        }
        /// <summary>
        /// Gets or sets the operation servers.
        /// </summary>
        /// <value>The operation servers.</value>
        public virtual IReadOnlyDictionary<string, List<IReadOnlyDictionary<string, object>>> OperationServers
        {
            get { return _operationServers; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Operation servers may not be null.");
                }
                _operationServers = value;
            }
        }
        /// <summary>
        /// Returns URL based on server settings without providing values
        /// for the variables
        /// </summary>
        /// <param name="index">Array index of the server settings.</param>
        /// <return>The server URL.</return>
        public string GetServerUrl(int index)
        {
            return GetServerUrl(Servers, index, null);
        }
        /// <summary>
        /// Returns URL based on server settings.
        /// </summary>
        /// <param name="index">Array index of the server settings.</param>
        /// <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
        /// <return>The server URL.</return>
        public string GetServerUrl(int index, Dictionary<string, string> inputVariables)
        {
            return GetServerUrl(Servers, index, inputVariables);
        }
        /// <summary>
        /// Returns URL based on operation server settings.
        /// </summary>
        /// <param name="operation">Operation associated with the request path.</param>
        /// <param name="index">Array index of the server settings.</param>
        /// <return>The operation server URL.</return>
        public string GetOperationServerUrl(string operation, int index)
        {
            return GetOperationServerUrl(operation, index, null);
        }
        /// <summary>
        /// Returns URL based on operation server settings.
        /// </summary>
        /// <param name="operation">Operation associated with the request path.</param>
        /// <param name="index">Array index of the server settings.</param>
        /// <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
        /// <return>The operation server URL.</return>
        public string GetOperationServerUrl(string operation, int index, Dictionary<string, string> inputVariables)
        {
            if (operation != null && OperationServers.TryGetValue(operation, out var operationServer))
            {
                return GetServerUrl(operationServer, index, inputVariables);
            }
            return null;
        }
        /// <summary>
        /// Returns URL based on server settings.
        /// </summary>
        /// <param name="servers">Dictionary of server settings.</param>
        /// <param name="index">Array index of the server settings.</param>
        /// <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
        /// <return>The server URL.</return>
        private string GetServerUrl(IList<IReadOnlyDictionary<string, object>> servers, int index, Dictionary<string, string> inputVariables)
        {
            if (index < 0 || index >= servers.Count)
            {
                throw new InvalidOperationException($"Invalid index {index} when selecting the server. Must be less than {servers.Count}.");
            }
            if (inputVariables == null)
            {
                inputVariables = new Dictionary<string, string>();
            }
            IReadOnlyDictionary<string, object> server = servers[index];
            string url = (string)server["url"];
            if (server.ContainsKey("variables"))
            {
                // go through each variable and assign a value
                foreach (KeyValuePair<string, object> variable in (IReadOnlyDictionary<string, object>)server["variables"])
                {
                    IReadOnlyDictionary<string, object> serverVariables = (IReadOnlyDictionary<string, object>)(variable.Value);
                    if (inputVariables.ContainsKey(variable.Key))
                    {
                        if (((List<string>)serverVariables["enum_values"]).Contains(inputVariables[variable.Key]))
                        {
                            url = url.Replace("{" + variable.Key + "}", inputVariables[variable.Key]);
                        }
                        else
                        {
                            throw new InvalidOperationException($"The variable `{variable.Key}` in the server URL has invalid value #{inputVariables[variable.Key]}. Must be {(List<string>)serverVariables["enum_values"]}");
                        }
                    }
                    else
                    {
                        // use default value
                        url = url.Replace("{" + variable.Key + "}", (string)serverVariables["default_value"]);
                    }
                }
            }
            return url;
        }
        /// <summary>
        /// Gets and Sets the RemoteCertificateValidationCallback
        /// </summary>
        public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; set; }
        #endregion Properties
        #region Methods
        /// <summary>
        /// Returns a string with essential information for debugging.
        /// </summary>
        public static string ToDebugReport()
        {
            string report = "C# SDK (HlidacStatu.Api.V2.Dataset) Debug Report:\n";
            report += "    OS: " + System.Environment.OSVersion + "\n";
            report += "    .NET Framework Version: " + System.Environment.Version  + "\n";
            report += "    Version of the API: v2\n";
            report += "    SDK Package Version: 1.0.0\n";
            return report;
        }
        /// <summary>
        /// Add Api Key Header.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        /// <returns></returns>
        public void AddApiKey(string key, string value)
        {
            ApiKey[key] = value;
        }
        /// <summary>
        /// Sets the API key prefix.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        public void AddApiKeyPrefix(string key, string value)
        {
            ApiKeyPrefix[key] = value;
        }
        #endregion Methods
        #region Static Members
        /// <summary>
        /// Merge configurations.
        /// </summary>
        /// <param name="first">First configuration.</param>
        /// <param name="second">Second configuration.</param>
        /// <return>Merged configuration.</return>
        public static IReadableConfiguration MergeConfigurations(IReadableConfiguration first, IReadableConfiguration second)
        {
            if (second == null) return first ?? GlobalConfiguration.Instance;
            Dictionary<string, string> apiKey = first.ApiKey.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            Dictionary<string, string> apiKeyPrefix = first.ApiKeyPrefix.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            Dictionary<string, string> defaultHeaders = first.DefaultHeaders.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            foreach (var kvp in second.ApiKey) apiKey[kvp.Key] = kvp.Value;
            foreach (var kvp in second.ApiKeyPrefix) apiKeyPrefix[kvp.Key] = kvp.Value;
            foreach (var kvp in second.DefaultHeaders) defaultHeaders[kvp.Key] = kvp.Value;
            var config = new Configuration
            {
                ApiKey = apiKey,
                ApiKeyPrefix = apiKeyPrefix,
                DefaultHeaders = defaultHeaders,
                BasePath = second.BasePath ?? first.BasePath,
                Timeout = second.Timeout,
                Proxy = second.Proxy ?? first.Proxy,
                UserAgent = second.UserAgent ?? first.UserAgent,
                Username = second.Username ?? first.Username,
                Password = second.Password ?? first.Password,
                AccessToken = second.AccessToken ?? first.AccessToken,
                TempFolderPath = second.TempFolderPath ?? first.TempFolderPath,
                DateTimeFormat = second.DateTimeFormat ?? first.DateTimeFormat,
                ClientCertificates = second.ClientCertificates ?? first.ClientCertificates,
                UseDefaultCredentials = second.UseDefaultCredentials,
                RemoteCertificateValidationCallback = second.RemoteCertificateValidationCallback ?? first.RemoteCertificateValidationCallback,
            };
            return config;
        }
        #endregion Static Members
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// A delegate to ExceptionFactory method
    /// </summary>
    /// <param name="methodName">Method name</param>
    /// <param name="response">Response</param>
    /// <returns>Exceptions</returns>
    public delegate Exception ExceptionFactory(string methodName, IApiResponse response);
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// <see cref="GlobalConfiguration"/> provides a compile-time extension point for globally configuring
    /// API Clients.
    /// </summary>
    /// <remarks>
    /// A customized implementation via partial class may reside in another file and may
    /// be excluded from automatic generation via a .openapi-generator-ignore file.
    /// </remarks>
    public partial class GlobalConfiguration : Configuration
    {
        #region Private Members
        private static readonly object GlobalConfigSync = new { };
        private static IReadableConfiguration _globalConfiguration;
        #endregion Private Members
        #region Constructors
        /// <inheritdoc />
        private GlobalConfiguration()
        {
        }
        /// <inheritdoc />
        public GlobalConfiguration(IDictionary<string, string> defaultHeader, IDictionary<string, string> apiKey, IDictionary<string, string> apiKeyPrefix, string basePath = "http://localhost:3000/api") : base(defaultHeader, apiKey, apiKeyPrefix, basePath)
        {
        }
        static GlobalConfiguration()
        {
            Instance = new GlobalConfiguration();
        }
        #endregion Constructors
        /// <summary>
        /// Gets or sets the default Configuration.
        /// </summary>
        /// <value>Configuration.</value>
        public static IReadableConfiguration Instance
        {
            get { return _globalConfiguration; }
            set
            {
                lock (GlobalConfigSync)
                {
                    _globalConfiguration = value;
                }
            }
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Http methods supported by swagger
    /// </summary>
    public enum HttpMethod
    {
        /// <summary>HTTP GET request.</summary>
        Get,
        /// <summary>HTTP POST request.</summary>
        Post,
        /// <summary>HTTP PUT request.</summary>
        Put,
        /// <summary>HTTP DELETE request.</summary>
        Delete,
        /// <summary>HTTP HEAD request.</summary>
        Head,
        /// <summary>HTTP OPTIONS request.</summary>
        Options,
        /// <summary>HTTP PATCH request.</summary>
        Patch
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Represents configuration aspects required to interact with the API endpoints.
    /// </summary>
    public interface IApiAccessor
    {
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        string GetBasePath();
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        ExceptionFactory ExceptionFactory { get; set; }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Contract for Asynchronous RESTful API interactions.
    ///
    /// This interface allows consumers to provide a custom API accessor client.
    /// </summary>
    public interface IAsynchronousClient
    {
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the GET http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> GetAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the POST http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> PostAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the PUT http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> PutAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the DELETE http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> DeleteAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the HEAD http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> HeadAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the OPTIONS http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> OptionsAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Executes a non-blocking call to some <paramref name="path"/> using the PATCH http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>A task eventually representing the response data, decorated with <see cref="ApiResponse{T}"/></returns>
        Task<ApiResponse<T>> PatchAsync<T>(string path, RequestOptions options, IReadableConfiguration configuration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Represents a readable-only configuration contract.
    /// </summary>
    public interface IReadableConfiguration
    {
        /// <summary>
        /// Gets the access token.
        /// </summary>
        /// <value>Access token.</value>
        string AccessToken { get; }
        /// <summary>
        /// Gets the API key.
        /// </summary>
        /// <value>API key.</value>
        IDictionary<string, string> ApiKey { get; }
        /// <summary>
        /// Gets the API key prefix.
        /// </summary>
        /// <value>API key prefix.</value>
        IDictionary<string, string> ApiKeyPrefix { get; }
        /// <summary>
        /// Gets the base path.
        /// </summary>
        /// <value>Base path.</value>
        string BasePath { get; }
        /// <summary>
        /// Gets the date time format.
        /// </summary>
        /// <value>Date time format.</value>
        string DateTimeFormat { get; }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <value>Default header.</value>
        [Obsolete("Use DefaultHeaders instead.")]
        IDictionary<string, string> DefaultHeader { get; }
        /// <summary>
        /// Gets the default headers.
        /// </summary>
        /// <value>Default headers.</value>
        IDictionary<string, string> DefaultHeaders { get; }
        /// <summary>
        /// Gets the temp folder path.
        /// </summary>
        /// <value>Temp folder path.</value>
        string TempFolderPath { get; }
        /// <summary>
        /// Gets the HTTP connection timeout (in milliseconds)
        /// </summary>
        /// <value>HTTP connection timeout.</value>
        int Timeout { get; }
        /// <summary>
        /// Gets the proxy.
        /// </summary>
        /// <value>Proxy.</value>
        WebProxy Proxy { get; }
        /// <summary>
        /// Gets the user agent.
        /// </summary>
        /// <value>User agent.</value>
        string UserAgent { get; }
        /// <summary>
        /// Gets the username.
        /// </summary>
        /// <value>Username.</value>
        string Username { get; }
        /// <summary>
        /// Gets the password.
        /// </summary>
        /// <value>Password.</value>
        string Password { get; }
        /// <summary>
        /// Determine whether or not the "default credentials" (e.g. the user account under which the current process is running) will be sent along to the server. The default is false.
        /// </summary>
        bool UseDefaultCredentials { get; }
        /// <summary>
        /// Get the servers associated with the operation.
        /// </summary>
        /// <value>Operation servers.</value>
        IReadOnlyDictionary<string, List<IReadOnlyDictionary<string, object>>> OperationServers { get; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        string GetApiKeyWithPrefix(string apiKeyIdentifier);
        /// <summary>
        /// Gets the Operation server url at the provided index.
        /// </summary>
        /// <param name="operation">Operation server name.</param>
        /// <param name="index">Index of the operation server settings.</param>
        /// <returns></returns>
        string GetOperationServerUrl(string operation, int index);
        /// <summary>
        /// Gets certificate collection to be sent with requests.
        /// </summary>
        /// <value>X509 Certificate collection.</value>
        X509CertificateCollection ClientCertificates { get; }
        /// <summary>
        /// Callback function for handling the validation of remote certificates. Useful for certificate pinning and
        /// overriding certificate errors in the scope of a request.
        /// </summary>
        RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Contract for Synchronous RESTful API interactions.
    ///
    /// This interface allows consumers to provide a custom API accessor client.
    /// </summary>
    public interface ISynchronousClient
    {
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the GET http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Get<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the POST http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Post<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the PUT http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Put<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the DELETE http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Delete<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the HEAD http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Head<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the OPTIONS http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Options<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
        /// <summary>
        /// Executes a blocking call to some <paramref name="path"/> using the PATCH http verb.
        /// </summary>
        /// <param name="path">The relative path to invoke.</param>
        /// <param name="options">The request parameters to pass along to the client.</param>
        /// <param name="configuration">Per-request configurable settings.</param>
        /// <typeparam name="T">The return type.</typeparam>
        /// <returns>The response data, decorated with <see cref="ApiResponse{T}"/></returns>
        ApiResponse<T> Patch<T>(string path, RequestOptions options, IReadableConfiguration configuration = null);
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// A dictionary in which one key has many associated values.
    /// </summary>
    /// <typeparam name="TKey">The type of the key</typeparam>
    /// <typeparam name="TValue">The type of the value associated with the key.</typeparam>
    public class Multimap<TKey, TValue> : IDictionary<TKey, IList<TValue>>
    {
        #region Private Fields
        private readonly Dictionary<TKey, IList<TValue>> _dictionary;
        #endregion Private Fields
        #region Constructors
        /// <summary>
        /// Empty Constructor.
        /// </summary>
        public Multimap()
        {
            _dictionary = new Dictionary<TKey, IList<TValue>>();
        }
        /// <summary>
        /// Constructor with comparer.
        /// </summary>
        /// <param name="comparer"></param>
        public Multimap(IEqualityComparer<TKey> comparer)
        {
            _dictionary = new Dictionary<TKey, IList<TValue>>(comparer);
        }
        #endregion Constructors
        #region Enumerators
        /// <summary>
        /// To get the enumerator.
        /// </summary>
        /// <returns>Enumerator</returns>
        public IEnumerator<KeyValuePair<TKey, IList<TValue>>> GetEnumerator()
        {
            return _dictionary.GetEnumerator();
        }
        /// <summary>
        /// To get the enumerator.
        /// </summary>
        /// <returns>Enumerator</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return _dictionary.GetEnumerator();
        }
        #endregion Enumerators
        #region Public Members
        /// <summary>
        /// Add values to Multimap
        /// </summary>
        /// <param name="item">Key value pair</param>
        public void Add(KeyValuePair<TKey, IList<TValue>> item)
        {
            if (!TryAdd(item.Key, item.Value))
                throw new InvalidOperationException("Could not add values to Multimap.");
        }
        /// <summary>
        /// Add Multimap to Multimap
        /// </summary>
        /// <param name="multimap">Multimap</param>
        public void Add(Multimap<TKey, TValue> multimap)
        {
            foreach (var item in multimap)
            {
                if (!TryAdd(item.Key, item.Value))
                    throw new InvalidOperationException("Could not add values to Multimap.");
            }
        }
        /// <summary>
        /// Clear Multimap
        /// </summary>
        public void Clear()
        {
            _dictionary.Clear();
        }
        /// <summary>
        /// Determines whether Multimap contains the specified item.
        /// </summary>
        /// <param name="item">Key value pair</param>
        /// <exception cref="NotImplementedException">Method needs to be implemented</exception>
        /// <returns>true if the Multimap contains the item; otherwise, false.</returns>
        public bool Contains(KeyValuePair<TKey, IList<TValue>> item)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        ///  Copy items of the Multimap to an array,
        ///     starting at a particular array index.
        /// </summary>
        /// <param name="array">The array that is the destination of the items copied
        ///     from Multimap. The array must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        /// <exception cref="NotImplementedException">Method needs to be implemented</exception>
        public void CopyTo(KeyValuePair<TKey, IList<TValue>>[] array, int arrayIndex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Removes the specified item from the Multimap.
        /// </summary>
        /// <param name="item">Key value pair</param>
        /// <returns>true if the item is successfully removed; otherwise, false.</returns>
        /// <exception cref="NotImplementedException">Method needs to be implemented</exception>
        public bool Remove(KeyValuePair<TKey, IList<TValue>> item)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Gets the number of items contained in the Multimap.
        /// </summary>
        public int Count => _dictionary.Count;
        /// <summary>
        /// Gets a value indicating whether the Multimap is read-only.
        /// </summary>
        public bool IsReadOnly => false;
        /// <summary>
        /// Adds an item with the provided key and value to the Multimap.
        /// </summary>
        /// <param name="key">The object to use as the key of the item to add.</param>
        /// <param name="value">The object to use as the value of the item to add.</param>
        /// <exception cref="InvalidOperationException">Thrown when couldn't add the value to Multimap.</exception>
        public void Add(TKey key, IList<TValue> value)
        {
            if (value != null && value.Count > 0)
            {
                if (_dictionary.TryGetValue(key, out var list))
                {
                    foreach (var k in value) list.Add(k);
                }
                else
                {
                    list = new List<TValue>(value);
                    if (!TryAdd(key, list))
                        throw new InvalidOperationException("Could not add values to Multimap.");
                }
            }
        }
        /// <summary>
        /// Determines whether the Multimap contains an item with the specified key.
        /// </summary>
        /// <param name="key">The key to locate in the Multimap.</param>
        /// <returns>true if the Multimap contains an item with
        ///     the key; otherwise, false.</returns>
        public bool ContainsKey(TKey key)
        {
            return _dictionary.ContainsKey(key);
        }
        /// <summary>
        /// Removes item with the specified key from the Multimap.
        /// </summary>
        /// <param name="key">The key to locate in the Multimap.</param>
        /// <returns>true if the item is successfully removed; otherwise, false.</returns>
        public bool Remove(TKey key)
        {
            return TryRemove(key, out var _);
        }
        /// <summary>
        /// Gets the value associated with the specified key.
        /// </summary>
        /// <param name="key">The key whose value to get.</param>
        /// <param name="value">When this method returns, the value associated with the specified key, if the
        ///     key is found; otherwise, the default value for the type of the value parameter.
        ///     This parameter is passed uninitialized.</param>
        /// <returns> true if the object that implements Multimap contains
        ///     an item with the specified key; otherwise, false.</returns>
        public bool TryGetValue(TKey key, out IList<TValue> value)
        {
            return _dictionary.TryGetValue(key, out value);
        }
        /// <summary>
        /// Gets or sets the item with the specified key.
        /// </summary>
        /// <param name="key">The key of the item to get or set.</param>
        /// <returns>The value of the specified key.</returns>
        public IList<TValue> this[TKey key]
        {
            get => _dictionary[key];
            set => _dictionary[key] = value;
        }
        /// <summary>
        /// Gets a System.Collections.Generic.ICollection containing the keys of the Multimap.
        /// </summary>
        public ICollection<TKey> Keys => _dictionary.Keys;
        /// <summary>
        /// Gets a System.Collections.Generic.ICollection containing the values of the Multimap.
        /// </summary>
        public ICollection<IList<TValue>> Values => _dictionary.Values;
        /// <summary>
        ///  Copy the items of the Multimap to an System.Array,
        ///     starting at a particular System.Array index.
        /// </summary>
        /// <param name="array">The one-dimensional System.Array that is the destination of the items copied
        ///     from Multimap. The System.Array must have zero-based indexing.</param>
        /// <param name="index">The zero-based index in array at which copying begins.</param>
        public void CopyTo(Array array, int index)
        {
            ((ICollection)_dictionary).CopyTo(array, index);
        }
        /// <summary>
        /// Adds an item with the provided key and value to the Multimap.
        /// </summary>
        /// <param name="key">The object to use as the key of the item to add.</param>
        /// <param name="value">The object to use as the value of the item to add.</param>
        /// <exception cref="InvalidOperationException">Thrown when couldn't add value to Multimap.</exception>
        public void Add(TKey key, TValue value)
        {
            if (value != null)
            {
                if (_dictionary.TryGetValue(key, out var list))
                {
                    list.Add(value);
                }
                else
                {
                    list = new List<TValue> { value };
                    if (!TryAdd(key, list))
                        throw new InvalidOperationException("Could not add value to Multimap.");
                }
            }
        }
        #endregion Public Members
        #region Private Members
        /**
         * Helper method to encapsulate generator differences between dictionary types.
         */
        private bool TryRemove(TKey key, out IList<TValue> value)
        {
            _dictionary.TryGetValue(key, out value);
            return _dictionary.Remove(key);
        }
        /**
         * Helper method to encapsulate generator differences between dictionary types.
         */
        private bool TryAdd(TKey key, IList<TValue> value)
        {
            try
            {
                _dictionary.Add(key, value);
            }
            catch (ArgumentException)
            {
                return false;
            }
            return true;
        }
        #endregion Private Members
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Formatter for 'date' openapi formats ss defined by full-date - RFC3339
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
    /// </summary>
    public class OpenAPIDateConverter : IsoDateTimeConverter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenAPIDateConverter" /> class.
        /// </summary>
        public OpenAPIDateConverter()
        {
            // full-date   = date-fullyear "-" date-month "-" date-mday
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// A container for generalized request inputs. This type allows consumers to extend the request functionality
    /// by abstracting away from the default (built-in) request framework (e.g. RestSharp).
    /// </summary>
    public class RequestOptions
    {
        /// <summary>
        /// Parameters to be bound to path parts of the Request's URL
        /// </summary>
        public Dictionary<string, string> PathParameters { get; set; }
        /// <summary>
        /// Query parameters to be applied to the request.
        /// Keys may have 1 or more values associated.
        /// </summary>
        public Multimap<string, string> QueryParameters { get; set; }
        /// <summary>
        /// Header parameters to be applied to the request.
        /// Keys may have 1 or more values associated.
        /// </summary>
        public Multimap<string, string> HeaderParameters { get; set; }
        /// <summary>
        /// Form parameters to be sent along with the request.
        /// </summary>
        public Dictionary<string, string> FormParameters { get; set; }
        /// <summary>
        /// File parameters to be sent along with the request.
        /// </summary>
        public Multimap<string, Stream> FileParameters { get; set; }
        /// <summary>
        /// Cookies to be sent along with the request.
        /// </summary>
        public List<Cookie> Cookies { get; set; }
        /// <summary>
        /// Operation associated with the request path.
        /// </summary>
        public string Operation { get; set; }
        /// <summary>
        /// Index associated with the operation.
        /// </summary>
        public int OperationIndex { get; set; }
        /// <summary>
        /// Any data associated with a request body.
        /// </summary>
        public Object Data { get; set; }
        /// <summary>
        /// Constructs a new instance of <see cref="RequestOptions"/>
        /// </summary>
        public RequestOptions()
        {
            PathParameters = new Dictionary<string, string>();
            QueryParameters = new Multimap<string, string>();
            HeaderParameters = new Multimap<string, string>();
            FormParameters = new Dictionary<string, string>();
            FileParameters = new Multimap<string, Stream>();
            Cookies = new List<Cookie>();
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Client
{
    /// <summary>
    /// Configuration class to set the polly retry policies to be applied to the requests.
    /// </summary>
    public static class RetryConfiguration
    {
        /// <summary>
        /// Retry policy
        /// </summary>
        public static Policy<RestResponse> RetryPolicy { get; set; }
        /// <summary>
        /// Async retry policy
        /// </summary>
        public static AsyncPolicy<RestResponse> AsyncRetryPolicy { get; set; }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    ///  Abstract base class for oneOf, anyOf schemas in the OpenAPI specification
    /// </summary>
    public abstract partial class AbstractOpenAPISchema
    {
        /// <summary>
        ///  Custom JSON serializer
        /// </summary>
        static public readonly JsonSerializerSettings SerializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            MissingMemberHandling = MissingMemberHandling.Error,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        /// <summary>
        ///  Custom JSON serializer for objects with additional properties
        /// </summary>
        static public readonly JsonSerializerSettings AdditionalPropertiesSerializerSettings = new JsonSerializerSettings
        {
            // OpenAPI generated types generally hide default constructors.
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
            MissingMemberHandling = MissingMemberHandling.Ignore,
            ContractResolver = new DefaultContractResolver
            {
                NamingStrategy = new CamelCaseNamingStrategy
                {
                    OverrideSpecifiedNames = false
                }
            }
        };
        /// <summary>
        /// Gets or Sets the actual instance
        /// </summary>
        public abstract Object ActualInstance { get; set; }
        /// <summary>
        /// Gets or Sets IsNullable to indicate whether the instance is nullable
        /// </summary>
        public bool IsNullable { get; protected set; }
        /// <summary>
        /// Gets or Sets the schema type, which can be either `oneOf` or `anyOf`
        /// </summary>
        public string SchemaType { get; protected set; }
        /// <summary>
        /// Converts the instance into JSON string.
        /// </summary>
        public abstract string ToJson();
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    /// DSCreatedDTO
    /// </summary>
    [DataContract(Name = "DSCreatedDTO")]
    public partial class DSCreatedDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DSCreatedDTO" /> class.
        /// </summary>
        /// <param name="datasetId">datasetId.</param>
        public DSCreatedDTO(string datasetId = default(string))
        {
            this.DatasetId = datasetId;
        }
        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name = "DatasetId", EmitDefaultValue = true)]
        public string DatasetId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DSCreatedDTO {\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    /// DSItemResponseDTO
    /// </summary>
    [DataContract(Name = "DSItemResponseDTO")]
    public partial class DSItemResponseDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DSItemResponseDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        public DSItemResponseDTO(string id = default(string))
        {
            this.Id = id;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DSItemResponseDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    /// Registration
    /// </summary>
    [DataContract(Name = "Registration")]
    public partial class Registration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Registration" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="datasetId">datasetId.</param>
        /// <param name="origUrl">origUrl.</param>
        /// <param name="sourcecodeUrl">sourcecodeUrl.</param>
        /// <param name="description">description.</param>
        /// <param name="jsonSchema">jsonSchema.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="created">created.</param>
        /// <param name="betaversion">betaversion.</param>
        /// <param name="allowWriteAccess">allowWriteAccess.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="searchResultTemplate">searchResultTemplate.</param>
        /// <param name="detailTemplate">detailTemplate.</param>
        /// <param name="defaultOrderBy">defaultOrderBy.</param>
        /// <param name="orderList">orderList.</param>
        public Registration(string name = default(string), string datasetId = default(string), 
            string origUrl = default(string), string sourcecodeUrl = default(string), 
            string description = default(string), string jsonSchema = default(string), 
            string createdBy = default(string), DateTime created = default(DateTime), 
            bool betaversion = default(bool), bool allowWriteAccess = default(bool), 
            bool hidden = default(bool), Template searchResultTemplate = default(Template), 
            Template detailTemplate = default(Template), string defaultOrderBy = default(string), 
            string[,] orderList = default(string[,]))
        {
            this.Name = name;
            this.DatasetId = datasetId;
            this.OrigUrl = origUrl;
            this.SourcecodeUrl = sourcecodeUrl;
            this.Description = description;
            this.JsonSchema = jsonSchema;
            this.CreatedBy = createdBy;
            this.Created = created;
            this.Betaversion = betaversion;
            this.AllowWriteAccess = allowWriteAccess;
            this.Hidden = hidden;
            this.SearchResultTemplate = searchResultTemplate;
            this.DetailTemplate = detailTemplate;
            this.DefaultOrderBy = defaultOrderBy;
            this.OrderList = orderList;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; private set; }
        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets DatasetId
        /// </summary>
        [DataMember(Name = "datasetId", EmitDefaultValue = true)]
        public string DatasetId { get; set; }
        /// <summary>
        /// Gets or Sets OrigUrl
        /// </summary>
        [DataMember(Name = "origUrl", EmitDefaultValue = true)]
        public string OrigUrl { get; set; }
        /// <summary>
        /// Gets or Sets SourcecodeUrl
        /// </summary>
        [DataMember(Name = "sourcecodeUrl", EmitDefaultValue = true)]
        public string SourcecodeUrl { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets JsonSchema
        /// </summary>
        [DataMember(Name = "jsonSchema", EmitDefaultValue = true)]
        public string JsonSchema { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public DateTime Created { get; set; }
        /// <summary>
        /// Gets or Sets Betaversion
        /// </summary>
        [DataMember(Name = "betaversion", EmitDefaultValue = true)]
        public bool Betaversion { get; set; }
        /// <summary>
        /// Gets or Sets AllowWriteAccess
        /// </summary>
        [DataMember(Name = "allowWriteAccess", EmitDefaultValue = true)]
        public bool AllowWriteAccess { get; set; }
        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }
        /// <summary>
        /// Gets or Sets SearchResultTemplate
        /// </summary>
        [DataMember(Name = "searchResultTemplate", EmitDefaultValue = true)]
        public Template SearchResultTemplate { get; set; }
        /// <summary>
        /// Gets or Sets DetailTemplate
        /// </summary>
        [DataMember(Name = "detailTemplate", EmitDefaultValue = true)]
        public Template DetailTemplate { get; set; }
        /// <summary>
        /// Gets or Sets DefaultOrderBy
        /// </summary>
        [DataMember(Name = "defaultOrderBy", EmitDefaultValue = true)]
        public string DefaultOrderBy { get; set; }
        /// <summary>
        /// Gets or Sets OrderList
        /// </summary>
        [DataMember(Name = "orderList", EmitDefaultValue = false)]
        public string[,] OrderList { get; set; }
        /// <summary>
                                                        /// Returns the string presentation of the object
                                                        /// </summary>
                                                        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Registration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DatasetId: ").Append(DatasetId).Append("\n");
            sb.Append("  OrigUrl: ").Append(OrigUrl).Append("\n");
            sb.Append("  SourcecodeUrl: ").Append(SourcecodeUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  JsonSchema: ").Append(JsonSchema).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Betaversion: ").Append(Betaversion).Append("\n");
            sb.Append("  AllowWriteAccess: ").Append(AllowWriteAccess).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  SearchResultTemplate: ").Append(SearchResultTemplate).Append("\n");
            sb.Append("  DetailTemplate: ").Append(DetailTemplate).Append("\n");
            sb.Append("  DefaultOrderBy: ").Append(DefaultOrderBy).Append("\n");
            sb.Append("  OrderList: ").Append(OrderList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    /// SearchResultDTOObject
    /// </summary>
    [DataContract(Name = "SearchResultDTO[Object]")]
    public partial class SearchResultDTOObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResultDTOObject" /> class.
        /// </summary>
        /// <param name="total">total.</param>
        /// <param name="page">page.</param>
        /// <param name="results">results.</param>
        public SearchResultDTOObject(long total = default(long), int page = default(int), List<Object> results = default(List<Object>))
        {
            this.Total = total;
            this.Page = page;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "Total", EmitDefaultValue = true)]
        public long Total { get; set; }
        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "Page", EmitDefaultValue = true)]
        public int Page { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "Results", EmitDefaultValue = true)]
        public List<Object> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResultDTOObject {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    /// SearchResultDTORegistration
    /// </summary>
    [DataContract(Name = "SearchResultDTO[Registration]")]
    public partial class SearchResultDTORegistration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResultDTORegistration" /> class.
        /// </summary>
        /// <param name="total">total.</param>
        /// <param name="page">page.</param>
        /// <param name="results">results.</param>
        public SearchResultDTORegistration(long total = default(long), int page = default(int), List<Registration> results = default(List<Registration>))
        {
            this.Total = total;
            this.Page = page;
            this.Results = results;
        }
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "Total", EmitDefaultValue = true)]
        public long Total { get; set; }
        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "Page", EmitDefaultValue = true)]
        public int Page { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "Results", EmitDefaultValue = true)]
        public List<Registration> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResultDTORegistration {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    /// Template
    /// </summary>
    [DataContract(Name = "Template")]
    public partial class Template : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Template" /> class.
        /// </summary>
        /// <param name="header">header.</param>
        /// <param name="body">body.</param>
        /// <param name="footer">footer.</param>
        /// <param name="title">title.</param>
        /// <param name="properties">properties.</param>
        public Template(string header = default(string), string body = default(string), string footer = default(string), string title = default(string), List<string> properties = default(List<string>))
        {
            this.Header = header;
            this.Body = body;
            this.Footer = footer;
            this.Title = title;
            this.Properties = properties;
        }
        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = true)]
        public string Header { get; set; }
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public string Body { get; set; }
        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name = "footer", EmitDefaultValue = true)]
        public string Footer { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<string> Properties { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Template {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/*
 * HlidacStatu_ApiV2
 *
 * REST API Hlídace státu
 *
 * The version of the OpenAPI document: v2
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace HlidacStatu.Api.V2.Dataset.Model
{
    /// <summary>
    /// THash
    /// </summary>
    [DataContract(Name = "tHash")]
    public partial class THash : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="THash" /> class.
        /// </summary>
        /// <param name="algoritmus">algoritmus.</param>
        /// <param name="value">value.</param>
        public THash(string algoritmus = default(string), string value = default(string))
        {
            this.Algoritmus = algoritmus;
            this.Value = value;
        }
        /// <summary>
        /// Gets or Sets Algoritmus
        /// </summary>
        [DataMember(Name = "algoritmus", EmitDefaultValue = true)]
        public string Algoritmus { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "Value", EmitDefaultValue = true)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class THash {\n");
            sb.Append("  Algoritmus: ").Append(Algoritmus).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

